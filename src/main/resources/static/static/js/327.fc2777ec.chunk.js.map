{"version":3,"file":"static/js/327.fc2777ec.chunk.js","mappings":"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","sources":["config/ServiceURL.js","tneb/ReportSchemeWise.js","routes.js","components/AppContent.js","components/AppFooter.js","components/header/AppHeaderDropdown.js","assets/brand/logo.js","components/AppHeader.js","components/AppSidebarNav.js","config/navs.js","components/AppSidebar.js","layout/DefaultLayout.js","util/JWTUtil.js","util/APICall.js","util/localStorage.js"],"sourcesContent":["//var BASE_URL='http://172.168.0.66:8081/';\r\n//var BASE_URL='http://172.168.1.66:8081/';\r\n//var BASE_URL='http://162.240.109.231:8081/';\r\n\r\n\r\n//var BASE_URL='http://localhost:8081/';\r\n// /var AADHAR_BASE_URL='http://localhost:2305/';\r\n\r\nvar Mode=1\r\n\r\n\r\n\r\n//PRODUCTION CONFIG\r\n//===========================================\r\nif(Mode===1 || Mode===2)\r\n var BASE_URL=\"/twad_data_collection/employees/\";\r\n\r\nelse if(Mode=== 0)\r\nBASE_URL='http://localhost:80/employees/'    \r\n\r\n//var AADHAR_BASE_URL='http://162.240.109.231:2305/'; \r\n\r\n\r\n\r\n   // var BASE_URL1='http://172.168.0.33:8083/employees'\r\n\r\n//var BASE_URL='http://148.66.130.213:2306/';\r\n\r\n\r\n\r\nvar ServiceURL={};\r\n\r\n//Login\r\n\r\n\r\nServiceURL.OfficeList=BASE_URL+'dcb/offices';\r\nServiceURL.LoginDetails=BASE_URL+'user/authenticateUser';\r\nServiceURL.meterDetails=BASE_URL+'metre';\r\nServiceURL.meterDetailsHT=BASE_URL+'metres';\r\nServiceURL.schemesList=BASE_URL+'schemes';\r\nServiceURL.beneficiaryName=BASE_URL+'beneficiary';\r\nServiceURL.saveMapMetres=BASE_URL+'saveMapMetres';\r\nServiceURL.getReport=BASE_URL+'getReport';\r\nServiceURL.metreType=BASE_URL+'metreType';\r\nServiceURL.districtDetails=BASE_URL+'beneficiary/type';\r\nServiceURL.beneficiaryNameDetails=BASE_URL+'beneficiary/byType';\r\nServiceURL.panchayat=BASE_URL+'panchayat/dropdown';\r\nServiceURL.getAllMapMetresLt=BASE_URL+'getAllMapMetresLt';\r\nServiceURL.getDistrictDetails=BASE_URL+'beneficiary/district';\r\nServiceURL.getBeneficiaryNameDetails=BASE_URL+'beneficiary/district/block';\r\nServiceURL.chagePasswordDetails=BASE_URL+'user/initailResetPassword';\r\nServiceURL.SecondReport=BASE_URL+'SecondReport';\r\nServiceURL.Breakup=BASE_URL+'MetreType/Breakup';\r\nServiceURL.schemesWise=BASE_URL+'Consumption/Schemewise';\r\nServiceURL.officeList=BASE_URL+'scheme/office';\r\nServiceURL.getEDCDetails=BASE_URL+'scheme/getDetaild';\r\nServiceURL.sendApiData=BASE_URL+'scheme/sendApiData';\r\n\r\n\r\n\r\nServiceURL.getApiData=BASE_URL+'getPensionerDetails';\r\nServiceURL.saveApiData=BASE_URL+'savePensionerDetails';\r\n\r\nServiceURL.ListDBT=BASE_URL+'WelfareDeptService/listDBT';\r\n\r\nServiceURL.BankVerify=BASE_URL+'Bank/BankVerify';\r\n\r\nServiceURL.SaveGrievance=BASE_URL+'Grievance/SaveGrievance';\r\n\r\n\r\n\r\n\r\nmodule.exports=ServiceURL; ","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, } from 'react-redux'\r\n// import { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\n// import axios from 'axios';\r\n// import ReactApexChart from 'react-apexcharts';\r\n// import Chart from 'react-apexcharts';\r\nimport ServiceURL from '../config/ServiceURL';\r\nimport CallApi from '../../src/util/APICall'\r\n// import { useSelector, useDispatch } from 'react-redux';\r\nimport '../scss/report.css';\r\nimport {\r\n    CTable,\r\n    CTableDataCell,\r\n    CTableRow,\r\n    CTableHeaderCell,\r\n    CTableBody,\r\n    CSpinner,\r\n    CFormSelect,\r\n    CButton,\r\n    CModalBody,\r\n    CTableHead,\r\n    CModal, CModalHeader\r\n} from '@coreui/react';\r\nimport CIcon from '@coreui/icons-react';\r\nimport { cilCloudDownload } from '@coreui/icons';\r\n// import { element } from 'prop-types';\r\n// import { current } from '@reduxjs/toolkit';\r\n\r\nconst ReportSchemeWise = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [tableRow, setTableRow] = useState([]);\r\n    // const [selectedMonth, setSelectedMonth] = useState(0)\r\n    // const [selectedYear, setSelectedYear] = useState(0)\r\n    const [tableTwad, setTableTwad] = useState([])\r\n    const [visible, setVisible] = useState(false)\r\n    const [schemeName, setSchemeName] = useState('')\r\n    const [dcbBreakup, setDcbBreakUp] = useState(false);\r\n    const [sort, setSort] = useState(null)\r\n    const [schOffice, setSchOffice] = useState(null)\r\n    const [officeList, setOfficeList] = useState([])\r\n    const [error, setError] = useState(false)\r\n    const data = useSelector((state) => state.twad)\r\n    const officeId = data.office.officeId || 5000;\r\n    let officeLevelId = data.office.officeLevelId\r\n    let currentDate = new Date();\r\n    let currentMonth = currentDate.getMonth();\r\n    let currentYear = currentDate.getFullYear();\r\n    let serialNumberTwad = 1;\r\n    // function handleChange(event) {\r\n    //     setSelectedYear(event.target.value);\r\n    //     }\r\n    // function handleChange1(event) {\r\n    //     setSelectedMonth(event.target.value);\r\n    //  }\r\n    // console.log(selectedYear)\r\n    // console.log(selectedMonth)\r\n\r\n    // const handleSubmit = () => {\r\n    //     let url = ServiceURL.schemesWise;\r\n    //     const userData = {\r\n    //         demandYear: selectedYear,\r\n    //         demandMonth: selectedMonth\r\n\r\n    //     };\r\n    //     let p = CallApi.callEndPoint(url, userData);\r\n\r\n    //     p.then((response) => {\r\n    //         setTableRow(response.response);\r\n    //         console.log(tableRow)\r\n\r\n\r\n    //     }).catch((errors) => {\r\n    //         console.log(errors, \"errors\");\r\n    //     });\r\n\r\n\r\n    // }\r\n\r\n    console.log(officeLevelId)\r\n\r\n    // if(officeLevelId === 'DN'){\r\n    //     setSchOffice(officeId)\r\n    // }\r\n\r\n  \r\n\r\n    const twadDetails = (val1, val2, val3, val4, val5, val6) => {\r\n        let url = ServiceURL.schemesWise;\r\n        const userData = {\r\n            demandYear: currentYear,\r\n            demandMonth: currentMonth,\r\n            schemeId: val1,\r\n            flag: val2,\r\n            typeOfConnection: val3,\r\n            officeId :officeLevelId === 'DN' ? officeId : schOffice !== null ?  schOffice :null\r\n        };\r\n        if (val5 === 'dcb' && val6 !== null) {\r\n            setDcbBreakUp(true);\r\n\r\n        }\r\n        else {\r\n            setVisible(true)\r\n            setDcbBreakUp(false);\r\n\r\n        }\r\n        console.log(dcbBreakup)\r\n        setSchemeName(val4)\r\n        let p = CallApi.callEndPoint(url, userData);\r\n\r\n        p.then((response) => {\r\n\r\n            setTableTwad(response.response);\r\n            console.log(tableTwad)\r\n        }\r\n\r\n        ).catch((errors) => {\r\n            console.log(errors, \"errors\");\r\n        });\r\n\r\n\r\n    }\r\n\r\n    const exportSubTableData = () => {\r\n        const rows = document.querySelectorAll('.table tbody tr');\r\n\r\n        // Create a CSV formatted string\r\n        let csvContent = \"data:text/csv;charset=utf-8,\";\r\n        csvContent += \"S.NO,Scheme Id,Scheme Type,Scheme Name,No.of.HT,Demand Amount (Rupees in Lakhs),No.Of LT,Demand Amount(Rupees in Lakhs),Demand Amount(Average per month cost),Total Connections,Total Amount(Rupees in Lakhs),DCB Demand Raised(Rupees in Lakhs),Percentage of EB to DCB \\r\\n\";\r\n        rows.forEach((row, index) => {\r\n            const serialNumber = index + 1;\r\n            alert(row.querySelector('td:nth-child(2)'))\r\n            const schemeIdCell = row.querySelector('td:nth-child(2)');\r\n            const schemeTypeCell = row.querySelector('td:nth-child(3)');\r\n            const schemeNameCell = row.querySelector('td:nth-child(4)');\r\n            const noOfHTCell = row.querySelector('td:nth-child(5)');\r\n            const demandAmountCell1 = row.querySelector('td:nth-child(6)');\r\n            const noOfLTCell = row.querySelector('td:nth-child(7)');\r\n            const demandAmountCell2 = row.querySelector('td:nth-child(8)');\r\n            const averageDemandAmountCell = row.querySelector('td:nth-child(9)');\r\n            const totalConnectionsCell = row.querySelector('td:nth-child(10)');\r\n            const totalAmountCell = row.querySelector('td:nth-child(11)');\r\n            const dcbDemandCell = row.querySelector('td:nth-child(12)');\r\n            const percentCell = row.querySelector('td:nth-child(13)');\r\n\r\n            // Check if any cell is null\r\n            if (\r\n                !schemeIdCell || !schemeTypeCell || !schemeNameCell ||\r\n                !noOfHTCell ||\r\n                !demandAmountCell1 ||\r\n                !noOfLTCell ||\r\n                !demandAmountCell2 ||\r\n                !totalConnectionsCell || !averageDemandAmountCell ||\r\n                !totalAmountCell || !dcbDemandCell || !percentCell\r\n\r\n            ) {\r\n                console.error(`One or more cells not found in row ${index + 1}`);\r\n                return; // Move to the next row\r\n            }\r\n            const schemeId = schemeIdCell.textContent.trim().replace(/,/g, '');\r\n            const schemeType = schemeTypeCell.textContent.trim().replace(/,/g, '');\r\n            const schemeName = schemeNameCell.textContent.trim().replace(/,/g, '');\r\n            const noOfHT = noOfHTCell.textContent.trim().replace(/,/g, ''); // Remove commas\r\n            const demandAmount1 = demandAmountCell1.textContent.trim().replace(/,/g, ''); // Remove commas\r\n            const noOfLT = noOfLTCell.textContent.trim().replace(/,/g, ''); // Remove commas\r\n            const demandAmount2 = demandAmountCell2.textContent.trim().replace(/,/g, ''); // Remove commas\r\n            const averageAmount = averageDemandAmountCell.textContent.trim().replace(/,/g, '');\r\n            const totalConnections = totalConnectionsCell.textContent.trim().replace(/,/g, ''); // Remove commas\r\n            const totalAmount = totalAmountCell.textContent.trim().replace(/,/g, ''); // Remove commas\r\n            const dcbDemand = dcbDemandCell.textContent.trim().replace(/,/g, '');\r\n            const percent = percentCell.textContent.trim().replace(/,/g, '');\r\n\r\n            const rowString = `${serialNumber},\"${schemeId}\",\"${schemeType}\",\"${schemeName}\",${noOfHT},${demandAmount1},${noOfLT},${demandAmount2},${averageAmount},${totalConnections},${totalAmount},${dcbDemand},${percent}\\r\\n`;\r\n            csvContent += rowString;\r\n        });\r\n\r\n        // Create a link element and trigger a download\r\n        const encodedUri = encodeURI(csvContent);\r\n        const link = document.createElement(\"a\");\r\n        link.setAttribute(\"href\", encodedUri);\r\n        link.setAttribute(\"download\", \"ReportScheme.csv\");\r\n        document.body.appendChild(link); // Required for Firefox\r\n        link.click();\r\n    };\r\n    function getOffice() {\r\n\r\n\r\n        let url = ServiceURL.officeList;\r\n        const userData1 = {\r\n            officeList: \"getOffice\"\r\n        }\r\n        let p = CallApi.callEndPoint(url, userData1);\r\n        p.then((response) => {\r\n            console.log(response)\r\n            setOfficeList(response.response)\r\n        })\r\n\r\n        console.log(officeList)\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setLoading(false);\r\n        }, 5000);\r\n\r\n        let url = ServiceURL.schemesWise;\r\n        const userData = {\r\n            demandYear: currentYear,\r\n            demandMonth: currentMonth,\r\n            sortColumn: sort,\r\n            officeId: officeLevelId === 'DN' ? officeId : schOffice\r\n\r\n        };\r\n        let p = CallApi.callEndPoint(url, userData);\r\n\r\n        p.then((response) => {\r\n            setTableRow(response.response);\r\n            setError(false)\r\n            //console.log(tableRow)\r\n        }).catch((errors) => {\r\n            setError(true)\r\n            console.log(errors, \"errors\");\r\n        });\r\n\r\n\r\n        getOffice();\r\n        return () => clearTimeout(timeout);\r\n\r\n    }, [sort, schOffice]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div >\r\n            {loading ? (\r\n                <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '100vh' }}>\r\n                    <CSpinner color=\"primary\" variant=\"grow\" />\r\n                </div>\r\n            ) : (\r\n                <div className='body-container' >\r\n                    <div className='row justify-content-end mt-2 '>\r\n\r\n                        <div className='justify-content-end d-flex mt-2'>\r\n\r\n\r\n                            {officeLevelId === 'DN' ? '' :\r\n                                <>\r\n\r\n                                    <label className='lbl'>OfficeWise</label>\r\n\r\n                                    <CFormSelect aria-label=\"Default select example\" style={{ width: '200px', display: 'inline-block', marginRight: '1.5em' }} onChange={(e) => { setSchOffice(e.target.value) }}>\r\n\r\n                                        <option>Select Office </option>\r\n                                        {officeList.map((element) => (\r\n                                            <option value={element.office_id}>{element.office_name}</option>))}\r\n\r\n                                    </CFormSelect>\r\n\r\n                                </>}\r\n                            <label className='lbl'>Order By</label>\r\n                            <CFormSelect aria-label=\"Default select example\" style={{ width: '200px', display: 'inline-block', marginRight: '1.5em' }} onChange={(e) => { setSort(e.target.value) }}>\r\n\r\n                                <option>Select Order </option>\r\n                                <option value=\"total_amount\">EB</option>\r\n                                <option value=\"percentage\">EB/DCB</option>\r\n                            </CFormSelect>\r\n\r\n                            <CButton onClick={exportSubTableData} color='warning' className='rounded'>\r\n                                <CIcon icon={cilCloudDownload} className='text-white' />\r\n                                <span className='text-white mx-2'>Export Data</span>\r\n                            </CButton>\r\n                        </div>\r\n                        {/* <div className='sort-class'>\r\n                            \r\n                            <CFormSelect aria-label=\"Default select example\" style={{ width: '200px', display:'inline-block' }} onChange={(e)=>{setSort(e.target.value)}}>\r\n                               \r\n                                <option >Select Order </option>\r\n                                <option value=\"total_amount\">EB</option>\r\n                                <option value=\"percentage\">EB/DCB</option>                          \r\n                             </CFormSelect>\r\n                            </div> */}\r\n\r\n                        {/* <div >\r\n                        <CFormSelect aria-label=\"Default select example\" style={{ width: '200px', display:'inline-block' }} onChange={handleChange}>\r\n                            <option >Select Year</option>\r\n                            <option value=\"2021\">2024</option>\r\n                            <option value=\"2022\">2023</option>\r\n                            <option value=\"2023\">2022</option>\r\n                            <option value=\"2024\">2021</option>\r\n                        </CFormSelect>\r\n                        <CFormSelect aria-label=\"Default select example\" style={{ width: '200px', display:'inline-block' }} onChange={handleChange1}>\r\n                            <option >Select Month</option>\r\n                            <option value=\"1\">January</option>\r\n                            <option value=\"2\">February</option>\r\n                            <option value=\"3\" >March</option>\r\n                            <option value=\"4\" >April</option>\r\n                            <option value=\"5\" >May</option>\r\n                            <option value=\"6\" >June</option>\r\n                            <option value=\"7\" >July</option>\r\n                            <option value=\"8\" >August</option>\r\n                            <option value=\"9\" >September</option>\r\n                            <option value=\"10\" >October</option>\r\n                            <option value=\"11\" >November</option>\r\n                            <option value=\"12\" >December</option>\r\n                        </CFormSelect>\r\n                       \r\n                        <CButton className = 'ms-2 mb-1' color=\"info\" type='submit' onClick={handleSubmit}>Go</CButton></div> */}\r\n                        <CModalBody >\r\n\r\n\r\n                            <div id='body-container'>\r\n\r\n                                <CTable className=' mt-1 table table-striped table-hover table-responsive border-secondary table-bordered neumorphic-table' bordered >\r\n\r\n                                    <CTableHead className='body_space'>\r\n\r\n                                        <tr>\r\n\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>S.no</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>Scheme Id</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>Scheme type</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>Scheme name</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>No.Of HT</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center' ><span className='sch_name'>Demand Amount<br />(Rupees in Lakhs)</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>No.Of LT</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>Demand Amount<br />(Rupees in Lakhs)</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>Demand Amount<br />(Average per month cost)</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>Total Conne ctions</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>EB <br />Total Amount<br />(Rupees in Lakhs)</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>DCB Demand Raised<br />(Rupees in Lakhs)</span></CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" className='text-center'><span className='sch_name'>Percentage of EB to DCB</span></CTableHeaderCell>\r\n                                        </tr>\r\n\r\n\r\n                                    </CTableHead>\r\n\r\n\r\n                                    {!error ?\r\n                                        <CTableBody >\r\n\r\n\r\n                                            {tableRow.map((element, index) => (\r\n\r\n                                                <CTableRow key={\"row_\" + index} >\r\n                                                    <CTableDataCell className='text-end'><span className='sch_sub_name'>{index + 1}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-center'><span className='sch_sub_name'>{element.scheme_id}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-start'><span className='sch_sub_name'>{element.scheme_type_desc}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-start'><span className='sch_sub_name'>{element.scheme_name}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-end' onClick={() => twadDetails(element.scheme_id, \"schemewise\", \"HT\", element.scheme_name, '')}><span className='sch_sub_name'>{element.ht_consumer_count}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-end'><span className='sch_sub_name'>{element.ht_amount}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-end' onClick={() => twadDetails(element.scheme_id, \"schemewise\", \"LT\", element.scheme_name, '')}><span className='sch_sub_name'>{element.lt_consumer_count}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-end'><span className='sch_sub_name'>{element.lt_amount}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-end'><span className='sch_sub_name'>{element.average_lt_amount}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-end'><span className='sch_sub_name'>{element.ht_consumer_count + element.lt_consumer_count}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-end'><span className='sch_sub_name'>{element.total_amount}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-end' onClick={() => twadDetails(element.scheme_id, \"dcb_breakup\", '', element.scheme_name, 'dcb', element.dcb_demand)}><span className='sch_sub_name'>{element.dcb_demand === null ? 0.0 : element.dcb_demand}</span></CTableDataCell>\r\n                                                    <CTableDataCell className='text-center' ><span className='sch_sub_name'>{element.percentage}</span></CTableDataCell>\r\n\r\n\r\n                                                </CTableRow>\r\n\r\n\r\n\r\n                                            ))}\r\n                                            <CTableRow>\r\n                                                <CTableDataCell><b>Total</b></CTableDataCell>\r\n                                                <CTableDataCell></CTableDataCell>\r\n                                                <CTableDataCell></CTableDataCell>\r\n                                                <CTableDataCell></CTableDataCell>\r\n                                                <CTableDataCell className='text-end'>{tableRow.reduce((total, element) => total + element.ht_consumer_count, 0)}</CTableDataCell>\r\n                                                <CTableDataCell className='text-end'>{tableRow.reduce((total, element) => total + element.ht_amount, 0).toFixed(2)}</CTableDataCell>\r\n                                                <CTableDataCell className='text-end'>{tableRow.reduce((total, element) => total + element.lt_consumer_count, 0)}</CTableDataCell>\r\n                                                <CTableDataCell className='text-end'>{tableRow.reduce((total, element) => total + element.lt_amount, 0).toFixed(2)}</CTableDataCell>\r\n                                                <CTableDataCell className='text-end'>{tableRow.reduce((total, element) => total + element.average_lt_amount, 0).toFixed(2)}</CTableDataCell>\r\n                                                <CTableDataCell className='text-end'>{tableRow.reduce((total, element) => total + element.ht_consumer_count + element.lt_consumer_count, 0)}</CTableDataCell>\r\n                                                <CTableDataCell className='text-end'>{tableRow.reduce((total, element) => total + element.total_amount, 0).toFixed(2)}</CTableDataCell>\r\n                                                <CTableDataCell className='text-end'>{tableRow.reduce((total, element) => total + element.dcb_demand, 0).toFixed(2)}</CTableDataCell>\r\n                                                <CTableDataCell></CTableDataCell>\r\n\r\n\r\n                                            </CTableRow>\r\n\r\n                                        </CTableBody> : <><h4 className='mt-3 text-info'>No data Found</h4></>}\r\n\r\n                                </CTable>\r\n                            </div>\r\n                        </CModalBody>\r\n\r\n                    </div>\r\n\r\n                    <CModal\r\n                        fullscreen\r\n                        visible={visible}\r\n                        onClose={() => setVisible(false)}  >\r\n                        <CModalHeader closeButton>\r\n\r\n\r\n                        </CModalHeader>\r\n                        <CModalBody style={{ maxHeight: '100%', overflowY: 'auto', paddingTop: 0 }}>\r\n                            {/* <div className='justify-content-end d-flex mt-2'>\r\n                                <CButton onClick={exportSubTableData} color='warning' className='rounded'>\r\n                                    <CIcon icon={cilCloudDownload} className='text-white' />\r\n                                    <span className='text-white mx-2'>Export Data</span>\r\n                                </CButton>\r\n                            </div> */}\r\n                            <h4>Scheme Name - {schemeName}</h4>\r\n                            <div className='pt-3' >\r\n                                <CTable className='table table-striped table-hover table-responsive border-secondary table-bordered neumorphic-table'>\r\n                                    <CTableHead className='body_space'>\r\n                                        <CTableRow className='text-center'>\r\n                                            <CTableHeaderCell scope=\"col\">S.No</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Consumer Number</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Location</CTableHeaderCell>\r\n\r\n                                            <CTableHeaderCell scope=\"col\">Scheme</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Location Type</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Component Name</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Beneficiary Type</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">District Name</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Block Name</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Beneficiary Name</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Connection Status</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Amount <br />(in Rupees)</CTableHeaderCell>\r\n                                        </CTableRow>\r\n                                    </CTableHead>\r\n                                    <CTableBody className='body_space'>\r\n                                        {tableTwad.map((element, index) => (\r\n                                            <CTableRow key={\"row_\" + index}>\r\n                                                <CTableDataCell >{serialNumberTwad++}</CTableDataCell>\r\n                                                <CTableDataCell>{element?.consumer_number}</CTableDataCell>\r\n\r\n                                                <CTableDataCell>{element?.location?.replace('-1', \"\")}</CTableDataCell>\r\n                                                <CTableDataCell>{element?.listofschemas?.replace('-1', \"\")}</CTableDataCell>\r\n                                                <CTableDataCell>{element?.location_type?.replace('-1', \"\")}</CTableDataCell>\r\n                                                <CTableDataCell>{element?.component_name?.replace('-1', \"\")}</CTableDataCell>\r\n                                                <CTableDataCell>{element?.beneficiary_type?.replace('-1', \"\")}</CTableDataCell>\r\n                                                <CTableDataCell>{element?.district_name?.replace('-1', \"\")}</CTableDataCell>\r\n                                                <CTableDataCell>{element?.block_name?.replace('-1', \"\")}</CTableDataCell>\r\n                                                <CTableDataCell>{element?.beneficiary_name?.replace('-1', \"\")}</CTableDataCell>\r\n                                                <CTableDataCell>{element?.connection_status?.replace('-1', \"\")}</CTableDataCell>\r\n                                                <CTableDataCell >{element.type_of_connection === 'HT' ? element?.ht_amount : element?.lt_amount}</CTableDataCell>\r\n                                            </CTableRow>\r\n                                        ))}\r\n\r\n                                    </CTableBody>\r\n\r\n\r\n                                </CTable>\r\n                            </div>\r\n                        </CModalBody>\r\n                    </CModal>\r\n\r\n                    <CModal\r\n                        fullscreen\r\n                        visible={dcbBreakup}\r\n                        onClose={() => setDcbBreakUp(false)}  >\r\n                        <CModalHeader closeButton>\r\n\r\n\r\n                        </CModalHeader>\r\n                        <CModalBody style={{ maxHeight: '100%', overflowY: 'auto', paddingTop: 0 }}>\r\n                            <h4>Scheme Name - {schemeName}</h4>\r\n                            <div className='pt-3' >\r\n                                <CTable className='table table-striped table-hover table-responsive border-secondary table-bordered neumorphic-table'>\r\n                                    <CTableHead className='body_space'>\r\n                                        <CTableRow className='text-center'>\r\n                                            <CTableHeaderCell scope=\"col \" colSpan=\"1\">S.No</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Eb Scheme Id</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Dcb Scheme Id</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" colSpan=\"7\">Dcb Scheme Name</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\" colSpan=\"1\">Number of Beneficiaries</CTableHeaderCell>\r\n                                            <CTableHeaderCell scope=\"col\">Demand<br />(Rupees in Lakhs) </CTableHeaderCell>\r\n                                        </CTableRow>\r\n                                    </CTableHead>\r\n                                    <CTableBody className='body_space'>\r\n                                        {tableTwad.map((element, index) => (\r\n                                            <CTableRow key={\"row_\" + index}>\r\n                                                <CTableDataCell colSpan=\"1\" className='text-center'>{element.sl_no}</CTableDataCell>\r\n                                                <CTableDataCell className='text-center' >{element.eb_scheme_id}</CTableDataCell>\r\n                                                <CTableDataCell className='text-center' >{element.scheme_sno}</CTableDataCell>\r\n                                                <CTableDataCell colSpan=\"7\" >{element.dcb_scheme_name}</CTableDataCell>\r\n                                                <CTableDataCell colSpan=\"1\" className='text-center' >{element.beneficiary_count}</CTableDataCell>\r\n                                                <CTableDataCell className='text-center' >{element.demand}</CTableDataCell>\r\n                                            </CTableRow>\r\n                                        ))}\r\n\r\n                                        <CTableRow >\r\n                                            <CTableDataCell  ></CTableDataCell>\r\n                                            <CTableDataCell colSpan=\"1\" className='text-center' ><b>Total</b></CTableDataCell>\r\n                                            <CTableDataCell></CTableDataCell>\r\n                                            <CTableDataCell colSpan=\"7\"></CTableDataCell>\r\n                                            <CTableDataCell className='text-center'>{tableTwad.reduce((total, element) => total + element.beneficiary_count, 0)}</CTableDataCell>\r\n                                            <CTableDataCell className='text-center'>{tableTwad.reduce((total, element) => total + element.demand, 0)}</CTableDataCell>                                            </CTableRow>\r\n                                    </CTableBody>\r\n\r\n\r\n                                </CTable>\r\n                            </div>\r\n                        </CModalBody>\r\n                    </CModal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </div>)\r\n\r\n            }\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default ReportSchemeWise","import React from 'react'\nimport ReportSchemeWise from './tneb/ReportSchemeWise'\n\n\n\n\nconst Login =React.lazy(() => import('./pages/login/Login'))\nconst Password =React.lazy(() => import('./pages/Password/Password'))\nconst Dashboard = React.lazy(()=>import('./tneb/dashboard'))\n// const Metermaping = React.lazy(()=>import('./tneb/MeterMaping'))\n// const ExcessCharges = React.lazy(()=>import('./tneb/MeterMapping/ExcessCharge/ExcessCharges'))\n// const Analytics = React.lazy(()=>import('./tneb/Analytics'))\nconst Report = React.lazy(()=>import('./tneb/Reports'))\n// const Report_EB = React.lazy(()=>import('./tneb/Report-EB'))\n// const MeterMapingPageHT = React.lazy(()=>import('./tneb/MeterMapingHT'))\n// const reportHT = React.lazy(()=>import('./tneb/ReportHT'))\n// const reportScheme = React.lazy(()=>import('./tneb/ReportSchemeWise'))\nconst pension = React.lazy(()=>import('./tneb/PensionerFormDetails'))\n// const pension = React.lazy(()=>import('./tneb/PensionerFormDetails'))\n\n\nconst routes = [\n  { path: '/', exact: true, name: 'Home' },\n  { path: '/login', name: 'Login', element: Login },\n  { path: '/password', name: 'password', element: Password },\n  { path: '/dashboard', name: 'dashboard', element: Dashboard },\n  // { path: '/metermaping', name: 'metermaping', element: Metermaping },\n  // { path: '/metermapingHT', name: 'metermapingHT', element: MeterMapingPageHT },\n  // { path: 'excessCharges', name: 'excessCharges', element: ExcessCharges },\n  // { path: '/analytics', name: 'analytics', element: Analytics },\n  { path: '/report', name: 'report', element: Report },\n  // { path: '/report-EB', name: 'report-EB', element: Report_EB },\n  // { path: '/reportHT', name: 'report-EB', element: reportHT },\n  // { path: '/reportScheme', name: 'reportScheme', element: reportScheme },\n  { path: '/pension', name: 'pensionDetails', element: pension },\n\n]\n\nexport default routes\n","import React, { Suspense } from 'react'\nimport { Navigate, Route, Routes } from 'react-router-dom'\nimport { CContainer, CSpinner } from '@coreui/react'\n\n// routes config\nimport routes from '../routes'\n\nconst AppContent = () => {\n  return (\n    <CContainer lg>\n     \n      <Suspense fallback={<CSpinner color=\"primary\" />}>\n        <Routes>\n          {routes.map((route, idx) => {\n            return (\n              route.element && (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  element={<route.element />}\n                />\n              )\n            )\n          })}\n          <Route path=\"/\" element={<Navigate to=\"login\" replace />} />\n        </Routes>\n      </Suspense>\n    </CContainer>\n  )\n}\n\nexport default React.memo(AppContent)\n","import React from 'react'\nimport { CFooter } from '@coreui/react'\n\nconst AppFooter = () => {\n  return (\n    <CFooter className='d-none'>\n      <div>\n        <a href=\"https://coreui.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Tamil Nadu State Scholarship Portal\n        </a>\n        <span className=\"ms-1\">&copy; TNeGA</span>\n      </div>\n      <div className=\"ms-auto\">\n        <span className=\"me-1\">Powered by</span>\n        <a href=\"http://macssinnov.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Macss Innovations\n        </a>\n      </div>\n    </CFooter>\n  )\n}\n\nexport default React.memo(AppFooter)\n","import React from 'react'\nimport {\n  CAvatar,\n  CBadge,\n  CDropdown,\n  CDropdownDivider,\n  CDropdownHeader,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n} from '@coreui/react'\nimport {\n  cilBell,\n  cilCreditCard,\n  cilCommentSquare,\n  cilEnvelopeOpen,\n  cilFile,\n  cilLockLocked,\n  cilSettings,\n  cilTask,\n  cilUser,\n} from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport { BrowserRouter as Router,  Routes,useNavigate,  Route,  Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport { decrement, login } from '../../auth/reducers/index'\n\n\n//import avatar8 from './../../tnssp/imgres/tn_logo.png'\n\nconst AppHeaderDropdown = () => {\n  let navigate = useNavigate();\n  const dispatch = useDispatch()\n  const log_out=(e)=>{\n    console.log('logged Out')\n    dispatch(login({message:'Logged Out',userName:'',password:''}))\n    navigate('/login',{})\n  }\n  return (\n    <CDropdown variant=\"nav-item\">\n      <CDropdownToggle placement=\"bottom-end\" className=\"py-0\" caret={false}>\n      \n      </CDropdownToggle>\n      <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n        <CDropdownHeader className=\"bg-light fw-semibold py-2\">Account</CDropdownHeader>\n        \n        \n        <CDropdownItem href=\"#\" onClick={(e)=>{ log_out(e)}}>\n          <CIcon icon={cilLockLocked} className=\"me-2\" />\n        Log Out\n        </CDropdownItem>\n      </CDropdownMenu>\n    </CDropdown>\n  )\n}\n\nexport default AppHeaderDropdown\n","export const logo = [\n  '608 134',\n  `\n  <title>coreui react pro</title>\n  <g>\n    <g style=\"fill:#00a1ff\">\n      <path d=\"M362.0177,90.1512,353.25,69.4149a.2507.2507,0,0,0-.2559-.1914H343.01a.2263.2263,0,0,0-.2559.2559V90.0233a.5657.5657,0,0,1-.64.64h-1.2163a.5652.5652,0,0,1-.64-.64V46.5028a.5655.5655,0,0,1,.64-.64H353.442a9.9792,9.9792,0,0,1,7.7437,3.2324A12.2,12.2,0,0,1,364.13,57.64a12.4389,12.4389,0,0,1-2.24,7.584,9.37,9.37,0,0,1-6.08,3.7441c-.1709.086-.2139.1915-.128.3194l8.7041,20.6084.064.2558q0,.5127-.5757.5118h-1.1523A.703.703,0,0,1,362.0177,90.1512ZM342.754,48.3593v18.496a.2259.2259,0,0,0,.2559.2559h10.3037a7.6713,7.6713,0,0,0,6.0166-2.5918,9.8807,9.8807,0,0,0,2.3037-6.8164,10.2875,10.2875,0,0,0-2.272-6.9756,7.6033,7.6033,0,0,0-6.0483-2.624H343.01A.2263.2263,0,0,0,342.754,48.3593Z\"/>\n      <path d=\"M401.3263,48.1034H381.2945a.2262.2262,0,0,0-.2558.2559v18.496a.2259.2259,0,0,0,.2558.2559h13.8238a.5664.5664,0,0,1,.6406.64v.96a.5663.5663,0,0,1-.6406.6406H381.2945a.2263.2263,0,0,0-.2558.2559v18.56a.2258.2258,0,0,0,.2558.2558h20.0318a.5671.5671,0,0,1,.6406.6407v.96a.566.566,0,0,1-.6406.64H379.1827a.5653.5653,0,0,1-.64-.64V46.5028a.5656.5656,0,0,1,.64-.64h22.1436a.5664.5664,0,0,1,.6406.64v.96A.5663.5663,0,0,1,401.3263,48.1034Z\"/>\n      <path d=\"M439.047,90.1512l-2.4317-8.832a.2971.2971,0,0,0-.32-.1924H419.5274a.2957.2957,0,0,0-.32.1924l-2.3681,8.7676a.6577.6577,0,0,1-.7036.5762H414.919a.5385.5385,0,0,1-.5756-.7041l12.0317-43.584a.6436.6436,0,0,1,.7041-.5117h1.6a.6442.6442,0,0,1,.7041.5117l12.16,43.584.0644.1923q0,.5127-.64.5118h-1.2163A.6428.6428,0,0,1,439.047,90.1512ZM419.9435,78.9188a.3031.3031,0,0,0,.2236.0967h15.4883a.3048.3048,0,0,0,.2236-.0967c.0645-.0635.0742-.1162.0322-.1592l-7.872-28.9287c-.043-.0849-.086-.1279-.128-.1279s-.0859.043-.1279.1279L419.9112,78.76C419.8683,78.8026,419.879,78.8553,419.9435,78.9188Z\"/>\n      <path d=\"M456.6017,87.911a11.6372,11.6372,0,0,1-3.3277-8.7041V57.1913a11.4158,11.4158,0,0,1,3.36-8.5762,12.0941,12.0941,0,0,1,8.8-3.2637,12.2566,12.2566,0,0,1,8.8643,3.2315,11.3927,11.3927,0,0,1,3.36,8.6084v.64a.5663.5663,0,0,1-.6406.6407l-1.28.0634q-.6408,0-.64-.5761v-.8321a9.289,9.289,0,0,0-2.6558-6.9121,10.6734,10.6734,0,0,0-14.0161,0,9.2854,9.2854,0,0,0-2.6563,6.9121V79.3993a9.2808,9.2808,0,0,0,2.6563,6.9121,10.67,10.67,0,0,0,14.0161,0,9.2843,9.2843,0,0,0,2.6558-6.9121v-.7686q0-.5757.64-.5752l1.28.0635a.5667.5667,0,0,1,.6406.6406v.5118a11.4952,11.4952,0,0,1-3.36,8.64,13.6227,13.6227,0,0,1-17.6963,0Z\"/>\n      <path d=\"M514.4376,46.5028v.96a.5658.5658,0,0,1-.64.6406H503.046a.2263.2263,0,0,0-.2559.2559v41.664a.566.566,0,0,1-.6406.64h-1.2158a.5652.5652,0,0,1-.64-.64V48.3593a.2266.2266,0,0,0-.2558-.2559H489.8619a.5656.5656,0,0,1-.64-.6406v-.96a.5656.5656,0,0,1,.64-.64H513.798A.5658.5658,0,0,1,514.4376,46.5028Z\"/>\n      <path d=\"M522.0665,89.5116a2.8385,2.8385,0,0,1-.8-2.0488,2.9194,2.9194,0,0,1,.8-2.1114,2.7544,2.7544,0,0,1,2.08-.832,2.8465,2.8465,0,0,1,2.9438,2.9434,2.7541,2.7541,0,0,1-.832,2.08,2.9221,2.9221,0,0,1-2.1118.8008A2.754,2.754,0,0,1,522.0665,89.5116Z\"/>\n      <path d=\"M542.4054,88.0077a11.3123,11.3123,0,0,1-3.2-8.416v-5.44a.5656.5656,0,0,1,.64-.64h1.2158a.5661.5661,0,0,1,.64.64v5.5039a9.1424,9.1424,0,0,0,2.5283,6.72,8.9745,8.9745,0,0,0,6.6875,2.5605,8.7908,8.7908,0,0,0,9.28-9.28V46.5028a.5655.5655,0,0,1,.64-.64h1.2163a.566.566,0,0,1,.64.64V79.5917a11.2545,11.2545,0,0,1-3.2325,8.416,13.0618,13.0618,0,0,1-17.0556,0Z\"/>\n      <path d=\"M580.35,88.1034a10.4859,10.4859,0,0,1-3.36-8.1279v-1.792a.5663.5663,0,0,1,.64-.6407h1.0884a.5668.5668,0,0,1,.64.6407v1.6a8.5459,8.5459,0,0,0,2.752,6.6562,10.5353,10.5353,0,0,0,7.36,2.4961,9.8719,9.8719,0,0,0,6.9761-2.3681,8.2161,8.2161,0,0,0,2.56-6.336,8.4,8.4,0,0,0-1.12-4.416,11.3812,11.3812,0,0,0-3.3281-3.3926,71.6714,71.6714,0,0,0-6.1763-3.7119,71.0479,71.0479,0,0,1-6.24-3.84,12.1711,12.1711,0,0,1-3.4238-3.68,10.2614,10.2614,0,0,1-1.28-5.3438,9.8579,9.8579,0,0,1,3.0718-7.7441,12.0122,12.0122,0,0,1,8.32-2.752q5.6954,0,8.96,3.1036a10.8251,10.8251,0,0,1,3.2642,8.2246v1.6a.5658.5658,0,0,1-.64.64h-1.1519a.5652.5652,0,0,1-.64-.64V56.8075a8.8647,8.8647,0,0,0-2.624-6.6885,9.9933,9.9933,0,0,0-7.232-2.5273,9.37,9.37,0,0,0-6.5278,2.1435,7.8224,7.8224,0,0,0-2.3682,6.1123,7.8006,7.8006,0,0,0,1.0244,4.16,10.387,10.387,0,0,0,3.0078,3.0391,62.8714,62.8714,0,0,0,5.9522,3.4882,71.0575,71.0575,0,0,1,6.72,4.2559,13.4674,13.4674,0,0,1,3.648,3.9365,10.049,10.049,0,0,1,1.28,5.1836,10.7177,10.7177,0,0,1-3.2637,8.1924q-3.2637,3.0717-8.832,3.0723Q583.71,91.1757,580.35,88.1034Z\"/>\n    </g>\n    <g style=\"fill:#3c4b64\">\n      <g>\n        <path d=\"M99.835,36.0577l-39-22.5167a12,12,0,0,0-12,0l-39,22.5166a12.0339,12.0339,0,0,0-6,10.3924V91.4833a12.0333,12.0333,0,0,0,6,10.3923l39,22.5167a12,12,0,0,0,12,0l39-22.5167a12.0331,12.0331,0,0,0,6-10.3923V46.45A12.0334,12.0334,0,0,0,99.835,36.0577Zm-2,55.4256a4,4,0,0,1-2,3.4641l-39,22.5167a4.0006,4.0006,0,0,1-4,0l-39-22.5167a4,4,0,0,1-2-3.4641V46.45a4,4,0,0,1,2-3.4642l39-22.5166a4,4,0,0,1,4,0l39,22.5166a4,4,0,0,1,2,3.4642Z\"/>\n        <path d=\"M77.8567,82.0046h-2.866a4,4,0,0,0-1.9247.4934L55.7852,91.9833,35.835,80.4648V57.4872l19.95-11.5185,17.2893,9.4549a3.9993,3.9993,0,0,0,1.9192.4906h2.8632a2,2,0,0,0,2-2V51.2024a2,2,0,0,0-1.04-1.7547L59.628,38.9521a8.0391,8.0391,0,0,0-7.8428.09L31.8346,50.56a8.0246,8.0246,0,0,0-4,6.9287v22.976a8,8,0,0,0,4,6.9283l19.95,11.5186a8.0429,8.0429,0,0,0,7.8433.0879l19.19-10.5312a2,2,0,0,0,1.0378-1.7533v-2.71A2,2,0,0,0,77.8567,82.0046Z\"/>\n      </g>\n      <g>\n        <path d=\"M172.58,45.3618a15.0166,15.0166,0,0,0-15,14.9995V77.6387a15,15,0,0,0,30,0V60.3613A15.0166,15.0166,0,0,0,172.58,45.3618Zm7,32.2769a7,7,0,0,1-14,0V60.3613a7,7,0,0,1,14,0Z\"/>\n        <path d=\"M135.9138,53.4211a7.01,7.01,0,0,1,7.8681,6.0752.9894.9894,0,0,0,.9843.865h6.03a1.0108,1.0108,0,0,0,.9987-1.0971,15.0182,15.0182,0,0,0-15.7162-13.8837,15.2881,15.2881,0,0,0-14.2441,15.4163V77.2037A15.288,15.288,0,0,0,136.0792,92.62a15.0183,15.0183,0,0,0,15.7162-13.8842,1.0107,1.0107,0,0,0-.9987-1.0971h-6.03a.9894.9894,0,0,0-.9843.865,7.01,7.01,0,0,1-7.8679,6.0757,7.1642,7.1642,0,0,1-6.0789-7.1849V60.6057A7.1638,7.1638,0,0,1,135.9138,53.4211Z\"/>\n        <path d=\"M218.7572,72.9277a12.1585,12.1585,0,0,0,7.1843-11.0771V58.1494A12.1494,12.1494,0,0,0,213.7921,46H196.835a1,1,0,0,0-1,1V91a1,1,0,0,0,1,1h6a1,1,0,0,0,1-1V74h6.6216l7.9154,17.4138a1,1,0,0,0,.91.5862h6.5911a1,1,0,0,0,.91-1.4138Zm-.8157-11.0771A4.1538,4.1538,0,0,1,213.7926,66h-9.8511V54h9.8511a4.1538,4.1538,0,0,1,4.1489,4.1494Z\"/>\n        <path d=\"M260.835,46h-26a1,1,0,0,0-1,1V91a1,1,0,0,0,1,1h26a1,1,0,0,0,1-1V85a1,1,0,0,0-1-1h-19V72h13a1,1,0,0,0,1-1V65a1,1,0,0,0-1-1h-13V54h19a1,1,0,0,0,1-1V47A1,1,0,0,0,260.835,46Z\"/>\n        <path d=\"M298.835,46h-6a1,1,0,0,0-1,1V69.6475a7.0066,7.0066,0,1,1-14,0V47a1,1,0,0,0-1-1h-6a1,1,0,0,0-1,1V69.6475a15.0031,15.0031,0,1,0,30,0V47A1,1,0,0,0,298.835,46Z\"/>\n        <rect x=\"307.835\" y=\"46\" width=\"8\" height=\"38\" rx=\"1\"/>\n      </g>\n    </g>\n  </g>\n`,\n]\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CContainer,\n  CHeader,\n  CHeaderBrand,\n  CHeaderDivider,\n  CHeaderNav,\n  CHeaderToggler,\n  CNavLink,\n  CNavItem,\n  CCollapse,\n  CDropdown,\n  CDropdownItem,\n  CDropdownToggle,\n  CDropdownMenu,\n  CButton\n\n\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilBell, cilEnvelopeOpen, cilList, cilMenu } from '@coreui/icons'\nimport { BrowserRouter as Router, Routes, useNavigate, useLocation, Route, Link } from \"react-router-dom\";\nimport { AppBreadcrumb } from './index'\nimport { AppHeaderDropdown } from './header/index'\nimport { logo } from 'src/assets/brand/logo'\nimport { decrement, increment, setSidebar } from '../auth/reducers/index'\nimport { useEffect, useState } from 'react';\nconst AppHeader = () => {\n  const dispatch = useDispatch()\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n  const data = useSelector((state) => state.twad)\n  let navigate = useNavigate()\n  function headerDetals() {\n    console.log(data, \"dartagf\")\n  }\n\n  useEffect(() => {\n    headerDetals()\n  }, []);\n  function logoutClick() {\n\n    navigate('/ ', {})\n\n\n  }\n  return (\n    <CHeader position=\"sticky\" className=\"mb-4 sidebar-color\">\n      <CContainer fluid>\n        <CHeaderToggler\n          className=\"ps-1\"\n          //  onClick={() => dispatch({ type: 'set', sidebarShow: !sidebarShow })}\n          onClick={() => dispatch(setSidebar())}\n        >\n          <CIcon icon={cilMenu} size=\"lg\" />\n        </CHeaderToggler>\n        <CHeaderBrand className=\"mx-auto d-md-none\" to=\"/\">\n          <CIcon icon={logo} height={48} alt=\"Logo\" />\n        </CHeaderBrand>\n\n\n        <CHeaderNav className=\"d-none d-md-flex me-auto\">\n          <CNavItem>\n\n            <CNavLink to=\"/pension\" component={NavLink}>\n              <h3 className='text-white'> TWAD-PENSION/FAMILY PENSION</h3>\n            </CNavLink>\n          </CNavItem>\n          {/* <CNavItem>\n                    <CNavLink href=\"#\"></CNavLink>\n                  </CNavItem> */}\n\n        </CHeaderNav>\n        <div className='text-decoration-none'>Name: {data.employeeName}\n\n\n\n          <CNavLink href=\"#\">Office Name: {data.office.officeName}</CNavLink>\n\n        </div>\n        <CButton className='text-white mx-2' onClick={logoutClick}>Logout</CButton>\n      </CContainer>\n    </CHeader>\n  )\n}\n\nexport default AppHeader\n","import React from 'react'\nimport { NavLink, useLocation } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport { CBadge } from '@coreui/react'\n\nexport const AppSidebarNav = ({ items }) => {\n  console.log('Hi')\n  const location = useLocation()\n  const navLink = (name, icon, badge) => {\n    return (\n      <>\n        {icon && icon}\n        {name && name}\n        {badge && (\n          <CBadge color={badge.color} className=\"ms-auto\">\n            {badge.text}\n          </CBadge>\n        )}\n      </>\n    )\n  }\n\n  const navItem = (item, index) => {\n    const { component, name, badge, icon, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        {...(rest.to &&\n          !rest.items && {\n            component: NavLink,\n          })}\n        key={index}\n        {...rest}\n      >\n        {navLink(name, icon, badge)}\n      </Component>\n    )\n  }\n  const navGroup = (item, index) => {\n    const { component, name, icon, items, to, ...rest } = item\n    const Component = component\n    return (\n      <Component compact as=\"div\" key={index} toggler={navLink(name, icon)} {...rest}> \n        {item.items?.map((item, index) =>\n          item.items ? navGroup(item, index) : navItem(item, index, true),\n        )}\n      </Component>\n    )\n    \n  }\n\n  return (\n    <React.Fragment>\n      {items &&\n        items.map((item, index) => (item.items ? navGroup(item, index) : navItem(item, index)))}\n    </React.Fragment>\n  )\n}\n\nAppSidebarNav.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n}\n","import React from 'react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport {\r\n  cilBell,\r\n  cilCalculator,\r\n  cilChartPie,\r\n  cilCursor,\r\n  cilDescription,\r\n  cilDrop,\r\n  cilNotes,\r\n  cilPencil,\r\n  cilPuzzle,\r\n  cilSpeedometer,\r\n  cilChevronCircleDownAlt,\r\n  \r\n  cilStar,\r\n  cilBug,\r\n  cibPostgresql,\r\n  cibCodesandbox,\r\n} from '@coreui/icons'\r\nimport { CNavGroup, CNavItem, CNavTitle,CBadge, } from '@coreui/react'\r\n\r\nvar Nav={};\r\n\r\n\r\n\r\n\r\n  Nav.Division=[\r\n    \r\n   \r\n    // {\r\n    //     component: CNavItem,\r\n    //     name: 'Dashboard',\r\n    //     to: '/dashboard',\r\n    //     icon: <CIcon icon={cilChevronCircleDownAlt} customClassName=\"nav-icon\" />,\r\n       \r\n    //   },\r\n    // ,\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Meter Mapping LT',\r\n    //   to: '/metermaping',\r\n    //   icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Meter Mapping HT',\r\n    //   to: '/metermapingHT',\r\n    //   icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'PF/EDC',\r\n    //   to: '/excessCharges',\r\n    //   icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    {\r\n      component: CNavItem,\r\n      name: 'Pension',\r\n      to: '/pension',\r\n      icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    },\r\n  \r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Analytics',\r\n    //   to: '/analytics',\r\n    \r\n    //     // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n  //   {\r\n  //     component: CNavItem,\r\n  //     name: 'Report',\r\n  //     to: '/report',\r\n  //       icon: <CIcon icon={cilDescription} customClassName=\"nav-icon\" />,\r\n     \r\n  //   },\r\n  //   {\r\n  //     component: CNavItem,\r\n  //     name: 'Report Scheme',\r\n  //     to: '/reportScheme',\r\n  //       icon: <CIcon icon={cilDescription} customClassName=\"nav-icon\" />,\r\n     \r\n  //   }\r\n  // ,\r\n    \r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'ReportHT',\r\n    //   to: '/reportHT',\r\n    //     // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Report-EB',\r\n    //   to: '/report-EB',\r\n    //     icon: <CIcon icon={cilDescription} customClassName=\"nav-icon\" />,\r\n     \r\n    // }\r\n  // ,\r\n]\r\n  Nav.HeadOffice=[\r\n    \r\n   \r\n    // {\r\n    //     component: CNavItem,\r\n    //     name: 'Dashboard',\r\n    //     to: '/dashboard',\r\n    //     icon: <CIcon icon={cilChevronCircleDownAlt} customClassName=\"nav-icon\" />,\r\n       \r\n    //   },\r\n      {\r\n        component: CNavItem,\r\n        name: 'Pension',\r\n        to: '/pension',\r\n        icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n       \r\n      },\r\n    \r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Meter Maping LT',\r\n    //   to: '/metermaping',\r\n    //   // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Meter Maping HT',\r\n    //   to: '/metermapingHT',\r\n    //   // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n  \r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Analytics',\r\n    //   to: '/analytics',\r\n    //     // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Report',\r\n    //   to: '/report',\r\n    //   icon: <CIcon icon={cilDescription} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Report-EB',\r\n    //   to: '/report-EB',\r\n    //   icon: <CIcon icon={cilDescription} customClassName=\"nav-icon\" />, \r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Report Scheme',\r\n    //   to: '/reportScheme',\r\n    //     icon: <CIcon icon={cilDescription} customClassName=\"nav-icon\" />,\r\n     \r\n    // }\r\n  ]\r\n  Nav.CircleOffice=[\r\n    \r\n   \r\n    // {\r\n    //     component: CNavItem,\r\n    //     name: 'Dashboard',\r\n    //     to: '/dashboard',\r\n    //     icon: <CIcon icon={cilChevronCircleDownAlt} customClassName=\"nav-icon\" />,\r\n       \r\n    //   },\r\n      {\r\n        component: CNavItem,\r\n        name: 'Pension',\r\n        to: '/pension',\r\n        icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n       \r\n      },\r\n      \r\n    \r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Meter Maping LT',\r\n    //   to: '/metermaping',\r\n    //   // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Meter Maping HT',\r\n    //   to: '/metermapingHT',\r\n    //   // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n  \r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Analytics',\r\n    //   to: '/analytics',\r\n    //     // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Report',\r\n    //   to: '/report',\r\n    //   icon: <CIcon icon={cilDescription} customClassName=\"nav-icon\" />,\r\n     \r\n    // }\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Report-EB',\r\n    //   to: '/report-EB',\r\n    //   icon: <CIcon icon={cilDescription} customClassName=\"nav-icon\" />, \r\n     \r\n    // }\r\n  ]\r\n  Nav.Admin=[\r\n    \r\n   \r\n    {\r\n        component: CNavItem,\r\n        name: 'Login',\r\n        to: '/login',\r\n        // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n       \r\n      }\r\n    \r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Meter Maping LT',\r\n    //   to: '/metermaping',\r\n    //   // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Meter Maping HT',\r\n    //   to: '/metermapingHT',\r\n    //   // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n  \r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Analytics',\r\n    //   to: '/analytics',\r\n    //     // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Report',\r\n    //   to: '/report',\r\n    //     // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // },\r\n    // {\r\n    //   component: CNavItem,\r\n    //   name: 'Report-EB',\r\n    //   to: '/report-EB',\r\n    //     // icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\r\n     \r\n    // }\r\n  ,]\r\n\r\n  export default Nav","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nimport { CSidebar, CSidebarBrand, CSidebarNav, CSidebarToggler,CImage ,CNavItem} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nimport { AppSidebarNav } from './AppSidebarNav'\n\nimport { logoNegative } from 'src/assets/brand/logo-negative'\nimport tnega  from 'src/assets/images/tnega_logo.png'\n\nimport SimpleBar from 'simplebar-react'\n// import 'simplebar/dist/simplebar.min.css'\nimport { BrowserRouter as Router, Routes, useNavigate, Route, Link } from \"react-router-dom\";\nimport { sygnet } from 'src/assets/brand/sygnet'\nimport '../login.css'\n// sidebar nav config\n// import 'Nav' from '../components/_nav.js'\nimport navigation from '../config/navs'\n\nconst AppSidebar = () => {\n  let navigate = useNavigate();\n  const dispatch = useDispatch()\n  const unfoldable = useSelector((state) => state.twad.sidebarUnfoldable)\n  const sidebarShow = useSelector((state) => state.twad.sidebarShow)\n  const userRole = useSelector((state) => state.twad.userRole)\n  const roleId = useSelector((state) => state.twad.roleId)\n  const data = useSelector((state) => state.twad)\n  const dash = useSelector((state) => state.twad.dash)\n  const portal=data.portal\n  const roleDetails=data\n  const vars = { \n\n    '--cui-float':\"right\",\n   //'--cui-sidebar-brand-bg':\"white\",\n   \n    // '--cui-sidebar-bg':\"#359297\"\n  \n  }\n  //const count = useSelector((state) => state.counter.value)\n  let nav=[];\n  console.log(roleDetails.roleId,\"role\");\n  console.log(data.portal)\nif(roleDetails.roleId=='5'){\n  nav=navigation.Division\n}else if(roleDetails.roleId=='1'){\n  \n    nav=navigation.HeadOffice\n}\nelse if(roleDetails.roleId=='3'){\n  \n  nav=navigation.CircleOffice\n}\nelse{\n  console.log(\"hgvyu\");\n  // nav=navigation.Admin\n  navigate('/ ', {})\n}\nconsole.log(roleDetails.roleId,\"roleDetails.roleId\");\n// else {\n//   navigate('/' );\n// }\n\n // console.log(navigation.Institution[2].badge)\n /* nav.push({\n    component: CNavItem,\n    name: 'Hello Students',\n    to: '/inst/InstitutionApproval',\n  })*/\n// }else if(userRole=='University'){\n//   nav=navigation.University\n// }else if(userRole=='Welfare Department'){\n//   if(roleId==6)\n//     nav=navigation.Scheme_HQ\n//   else if(roleId==14 ||roleId==10 ){\n//     if(portal=='bcmbc')\n//       nav=navigation.Scheme_Payment_BCMBC\n//     else if(portal=='dls')\n//       nav=navigation.Scheme_Payment_Admin_DLS\n//     else\n//       nav=navigation.Scheme_Payment_Admin_DLS\n\n//   }\n    \n    \n//   else if(roleId==15 )\n//     nav=navigation.Scheme_ADTW_HQ\n  \n//   else\n//     nav=navigation.Scheme_Dist\n// }else if(userRole=='Education Department'){\n//   if(roleId==8)\n//     nav=navigation.DLS_Module\n// }else if(userRole=='Admin'){\n//   nav=navigation.Admin\n  \n//   if(roleId==13 ||roleId==10 )\n//   if(data.portal=='adtw')\n//   nav=navigation.AdminADTW\n//   else\n//     nav=navigation.AdminBC\n \n// }\n  \n\n  return (\n    <CSidebar \n      position=\"fixed\"\n      className='sidebar-color'\n      style={vars}\n      unfoldable={unfoldable}\n      placement=\"start\"\n      visible={sidebarShow}\n      onVisibleChange={(visible) => {\n        dispatch({ type: 'set', sidebarShow: visible })\n\n      }}\n    >\n      <CSidebarBrand className=\"d-md-flex\" to=\"/\">\n      {/* <CImage src={tnega} width={200} height={100} /> */}\n      <h3 className='p-3'>PENSION/FAMILY PENSION</h3>\n      \n       \n      </CSidebarBrand>\n      <CSidebarNav >\n        <SimpleBar className='sidebar-alignment'>\n      \n          { <AppSidebarNav className='text-white' items={nav} /> }\n         </SimpleBar> \n      </CSidebarNav>\n      <CSidebarToggler\n        className=\" d-lg-flex\"\n        onClick={() => dispatch({ type: 'set', sidebarUnfoldable: !unfoldable })}\n      />\n    </CSidebar>\n  )\n}\n\nexport default React.memo(AppSidebar)\n","import React, { useState,useEffect, useRef } from 'react'\nimport { AppContent, AppSidebar, AppFooter, AppHeader } from '../components/index'\n\n\nimport { BrowserRouter as Router,  Routes,useNavigate,  Route,  Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport { decrement, login,setSidebar } from '../auth/reducers/index'\n\nimport LocalStorage from'../util/localStorage'\nimport '../scss/report.css'\n\nconst DefaultLayout = () => {\n  let navigate = useNavigate();\n  const loginData = useSelector((state) => state)\n  var local=LocalStorage.get_login()\n  const dispatch = useDispatch()\n\n  useEffect(() => {\nconsole.log(loginData.twad.userID)\nif(loginData.twad.userID=='')\nnavigate('/index');\n  \n  }, []);\n\n\n  useEffect(()=>{\n  \n /* if(local.message=='error')  {\n\n    if(loginData.twad.userName==''){\n      navigate('/login',{state:login});\n    }\n\n  } else if(loginData.twad.userName=='' && local.userName!=''){\n    dispatch(login({local}))\n  }*/\n  });\n\n  return (\n    <div>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-white \">\n        <AppHeader />\n        <div style={{width:'100%'}}>\n          <AppContent />\n        </div>\n        <AppFooter />\n      </div>\n      </div>\n      \n      \n      \n      // <div>\n      //   <AppSidebar />\n        \n      //   <div className='app-header'><AppHeader/></div>\n      //   <AppContent />\n      //   <AppFooter />\n       \n      //  </div>\n      \n  )\n}\n\nexport default DefaultLayout\n","\r\nimport * as jose from 'jose'\r\nvar JWTUtil={};\r\n\r\n\r\n\r\n\r\nJWTUtil.getJWT=async (ip) =>{\r\n    \r\n    const secret = new TextEncoder().encode(\r\n      'cc7e0d44fd473002f1c42167459001140ec6389b7353f8088f4d9a95f2f596f2',\r\n    )\r\n\r\n    let jwtProm=new Promise((resolve,reject)=>{ \r\n       \r\n            const token = new jose.SignJWT(ip ) // details to  encode in the token\r\n                .setProtectedHeader({ alg: 'HS256' }) // algorithm\r\n                .setIssuedAt()\r\n                .setIssuer('tnega:chris:issuer') // issuer\r\n                .setAudience('tnega:chris::audience') // audience\r\n                .setExpirationTime('2h') // token expiration time, e.g., \"1 day\"\r\n                .sign(secret); // secretKey generated from previous step\r\n            console.log(token); // log token to console\r\n        \r\n          resolve(token)\r\n\r\n     \r\n    } );\r\n    return jwtProm;\r\n  \r\n    \r\n\r\n /*\r\n     async function fetchJWTSign() {\r\n        try {\r\n\r\n            let jwtProm=new Promise((resolve,reject)=>{\r\n           \r\n                const jwt = new jose.SignJWT(ip)\r\n            .setProtectedHeader({ alg })\r\n            .setIssuedAt()\r\n            .setIssuer('tnega:chris:issuer')\r\n            .setAudience('tnega:chris::audience')\r\n            .setExpirationTime('2h')\r\n            .sign(secret)\r\n            resolve(jwt)\r\n               \r\n              });\r\n\r\n              return jwtProm;\r\n             /* jwtProm.then((result)=>{\r\n    \r\n             console.log(result)\r\n             return result;\r\n                //setLoading(false);\r\n        \r\n        // / console.log(result)\r\n              });*/\r\n\r\n          //setData(data);\r\n       \r\n       \r\n      \r\n\r\n\r\n \r\n  \r\n\r\n\r\n/*      (async () => {\r\n        try {\r\n        const { payload, protectedHeader } = await jose.jwtVerify(jwt, secret, {\r\n          issuer: 'urn:example:issuer',\r\n          audience: 'urn:example:audience',\r\n        })\r\n        console.log(protectedHeader)\r\n    console.log(payload)\r\n      }catch(e){\r\n        console.error(e);\r\n        console.error('Token is invalid')\r\n      }\r\n    \r\n      })();*/\r\n \r\n\r\n\r\n \r\n}\r\n\r\n\r\nexport default JWTUtil;","import Axios from 'axios';\r\n\r\nimport JWTUtil from './JWTUtil'  ;\r\nvar CallApi={};\r\n\r\n\r\nCallApi.getJWT=(ip)=>{\r\n    \r\n}\r\n\r\nCallApi.callEndPoint=(url,ip,flag)=>{\r\n        let promise=new Promise((resolve,reject)=>{\r\n            console.log(flag)\r\n            if(flag!==undefined){\r\n            let p=JWTUtil.getJWT(ip)\r\n                 p.then((result)=>{\r\n                  console.log(result)\r\n                  Axios.post(url,{jwt:result} ).then(res => {\r\n                    // res.data;\r\n                     resolve(res.data)\r\n                 }).catch(err=>{\r\n                     reject(err);\r\n                 });\r\n                 });\r\n                }else{\r\n\r\n                    Axios.post(url,ip ).then(res => {\r\n                        // res.data;\r\n                         resolve(res.data)\r\n                     }).catch(err=>{\r\n                         reject(err);\r\n                     });\r\n\r\n                }\r\n           \r\n           \r\n           \r\n          });\r\n      return promise;\r\n      \r\n\r\n\r\n    \r\n\r\n}\r\n\r\n\r\nexport default CallApi;","\r\n\r\n\r\n\r\nvar LocalStorageUtil={};\r\n\r\nLocalStorageUtil.test=()=>{\r\n   // console.log('module called');\r\n}\r\n\r\nLocalStorageUtil.store_login=(data)=>{\r\n //   console.log(localStorage.setItem('login', JSON.stringify(data)));\r\n}\r\n\r\n\r\nLocalStorageUtil.get_login=()=>{\r\n    //console.log(localStorage.getItem('login'));\r\n    let opt={}\r\n    try{\r\n    opt=JSON.parse(localStorage.getItem('login'))\r\n    }catch(e){\r\n        opt.message=\"error\"\r\n    }\r\n    return opt;\r\n}\r\n\r\nLocalStorageUtil.remove_login=()=>{\r\n  //  console.log(localStorage.removeItem('login'));\r\n}\r\n\r\n\r\nLocalStorageUtil.clear=()=>{\r\n   // console.log(localStorage.clear());\r\n}\r\n\r\nexport default LocalStorageUtil;"],"names":["BASE_URL","ServiceURL","OfficeList","LoginDetails","meterDetails","meterDetailsHT","schemesList","beneficiaryName","saveMapMetres","getReport","metreType","districtDetails","beneficiaryNameDetails","panchayat","getAllMapMetresLt","getDistrictDetails","getBeneficiaryNameDetails","chagePasswordDetails","SecondReport","Breakup","schemesWise","officeList","getEDCDetails","sendApiData","getApiData","saveApiData","ListDBT","BankVerify","SaveGrievance","module","exports","path","exact","name","element","React","AppContent","_jsx","CContainer","lg","children","Suspense","fallback","CSpinner","color","_jsxs","Routes","routes","map","route","idx","Route","Navigate","to","replace","AppFooter","CFooter","className","href","target","rel","logo","AppHeader","dispatch","useDispatch","data","useSelector","state","sidebarShow","twad","navigate","useNavigate","useEffect","console","log","CHeader","position","fluid","CHeaderToggler","onClick","setSidebar","CIcon","icon","cilMenu","size","CHeaderBrand","height","alt","CHeaderNav","CNavItem","CNavLink","component","NavLink","employeeName","office","officeName","CButton","AppSidebarNav","_ref","items","useLocation","navLink","badge","_Fragment","CBadge","text","navItem","item","index","rest","Component","_createElement","key","navGroup","_item$items","compact","as","toggler","Nav","Division","cilSpeedometer","customClassName","HeadOffice","CircleOffice","Admin","AppSidebar","unfoldable","sidebarUnfoldable","userRole","roleId","roleDetails","dash","portal","nav","navigation","CSidebar","style","placement","visible","onVisibleChange","type","CSidebarBrand","CSidebarNav","SimpleBar","CSidebarToggler","DefaultLayout","loginData","LocalStorage","get_login","userID","width","JWTUtil","async","secret","TextEncoder","encode","Promise","resolve","reject","token","jose","ip","setProtectedHeader","alg","setIssuedAt","setIssuer","setAudience","setExpirationTime","sign","CallApi","url","flag","undefined","getJWT","then","result","Axios","post","jwt","res","catch","err","LocalStorageUtil","opt","JSON","parse","localStorage","getItem","e","message"],"sourceRoot":""}