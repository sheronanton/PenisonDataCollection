{"version":3,"file":"static/js/486.307e31fd.chunk.js","mappings":"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","sources":["tneb/PensionerFormDetails.js","tneb/Reports.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useState, useRef } from 'react'\r\nimport { ScaleLoader } from 'react-spinners'\r\n\r\n// import classNames  from 'classnames'\r\nimport {\r\n  CTable,\r\n  CTableHead,\r\n  CTableBody,\r\n  CTableRow,\r\n  CTableHeaderCell,\r\n  CTableDataCell,\r\n  CButton,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CFormInput,\r\n  CFormSelect,\r\n  CFormLabel,\r\n  CRow,\r\n  CCol,\r\n  CFormCheck,\r\n  CFormFeedback,\r\n  CCardHeader,\r\n  CButtonGroup,\r\n  CBadge,\r\n} from '@coreui/react'\r\nimport ServiceURL from 'src/config/ServiceURL'\r\nimport CallApi from 'src/util/APICall'\r\nimport { useSelector } from 'react-redux'\r\nimport Reports from './Reports'\r\nimport validator from 'validator'\r\nimport './style.css'\r\n// import validator as aa   dhaarvalidate from 'aadhaar-validator';\r\n\r\nconst PensionerFormDetails = () => {\r\n  const aadharRef = useRef(null)\r\n  const panRef = useRef(null)\r\n  // const debouncedSearchPpo = useDebounce(searchPpo, 500)\r\n\r\n  const mobileRef = useRef(null)\r\n  const emailRef = useRef(null)\r\n\r\n  const [loading, setLoading] = useState(false) // initially false\r\n\r\n  const [isOtherState, setIsOtherState] = useState(false)\r\n  const [employees, setEmployees] = useState([])\r\n  const [editModalVisible, setEditModalVisible] = useState(false)\r\n  const [selectedEmployee, setSelectedEmployee] = useState({})\r\n  const [validated, setValidated] = useState(false)\r\n  const [errors, setErrors] = useState({})\r\n  const [phoneNumber, setPhoneNumber] = useState(0)\r\n  const [aadharNumber, setAadharNumber] = useState(0)\r\n  const [email, setEmail] = useState('')\r\n  const [panNumber, setPanNumber] = useState(' ')\r\n  let [userData, setUserData] = useState({})\r\n  const [validPinCode1, setvalidPinCode1] = useState()\r\n  const [doj, setDOJ] = useState()\r\n  const [data, setData] = useState([])\r\n  const [typeOfPrensioner, setTypeOfPensioner] = useState('P')\r\n  const [isChecked, setIsChecked] = useState(false)\r\n  const [searchedData, setSearchedData] = useState({})\r\n\r\n  const [searchPpo, setSearchPpo] = useState()\r\n  const [debouncedSearch, setDebouncedSearch] = useState('')\r\n\r\n  const officeId = useSelector((state) => state.twad.office.officeId)\r\n  const user = useSelector((state) => state.twad.userName) // or wherever your user slice is\r\n\r\n  const [statesList, setStatesList] = useState([\r\n    'Andhra Pradesh',\r\n    'Arunachal Pradesh',\r\n    'Assam',\r\n    'Bihar',\r\n    'Chhattisgarh',\r\n    'Goa',\r\n    'Gujarat',\r\n    'Haryana',\r\n    'Himachal Pradesh',\r\n    'Jharkhand',\r\n    'Karnataka',\r\n    'Kerala',\r\n    'Madhya Pradesh',\r\n    'Maharashtra',\r\n    'Manipur',\r\n    'Meghalaya',\r\n    'Mizoram',\r\n    'Nagaland',\r\n    'Odisha',\r\n    'Punjab',\r\n    'Rajasthan',\r\n    'Sikkim',\r\n    'Tamil Nadu',\r\n    'Telangana',\r\n    'Tripura',\r\n    'Uttar Pradesh',\r\n    'Uttarakhand',\r\n    'West Bengal',\r\n    'Andaman and Nicobar Islands',\r\n    'Chandigarh',\r\n    'Dadra and Nagar Haveli and Daman and Diu',\r\n    'Delhi',\r\n    'Jammu and Kashmir',\r\n    'Ladakh',\r\n    'Lakshadweep',\r\n    'Puducherry',\r\n  ])\r\n\r\n  const [districtsList, setDistrictsList] = useState([\r\n    'Ariyalur',\r\n    'Chengalpattu',\r\n    'Chennai',\r\n    'Coimbatore',\r\n    'Cuddalore',\r\n    'Dharmapuri',\r\n    'Dindigul',\r\n    'Erode',\r\n    'Kallakurichi',\r\n    'Kanchipuram',\r\n    'Kanyakumari',\r\n    'Karur',\r\n    'Krishnagiri',\r\n    'Madurai',\r\n    'Mayiladuthurai',\r\n    'Nagapattinam',\r\n    'Namakkal',\r\n    'Nilgiris',\r\n    'Perambalur',\r\n    'Pudukkottai',\r\n    'Ramanathapuram',\r\n    'Ranipet',\r\n    'Salem',\r\n    'Sivaganga',\r\n    'Tenkasi',\r\n    'Thanjavur',\r\n    'Theni',\r\n    'Thiruvallur',\r\n    'Thiruvarur',\r\n    'Thoothukudi',\r\n    'Tiruchirappalli',\r\n    'Tirunelveli',\r\n    'Tirupathur',\r\n    'Tiruppur',\r\n    'Tiruvannamalai',\r\n    'Vellore',\r\n    'Viluppuram',\r\n    'Virudhunagar',\r\n  ])\r\n\r\n  // useEffect(() => {\r\n  //   if (debouncedSearchPpo) {\r\n  //     console.log('Searching for:', debouncedSearchPpo)\r\n  //     handleSearch(debouncedSearchPpo)\r\n  //   }\r\n  // }, [debouncedSearchPpo])\r\n\r\n  function handleSearchPpo(e, status) {\r\n    const searchTerm = e.trim()\r\n    setSearchPpo(searchTerm)\r\n\r\n    if (status === 'search') {\r\n      console.log(e.length)\r\n      console.log(e)\r\n\r\n      if (searchTerm.length > 0) {\r\n        console.log(data)\r\n        const searchValue = searchedData.filter((item) =>\r\n          item.ppoNo.toString().includes(searchTerm),\r\n        )\r\n        setData(searchValue)\r\n      } else {\r\n        setData(searchedData)\r\n      }\r\n    }\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let newErrors = {}\r\n    let firstInvalidField = null\r\n\r\n    const aadhaar = selectedEmployee.aadhaarNo?.toString().trim()\r\n    const pan = selectedEmployee.panNo?.toString().trim().toUpperCase()\r\n    let mobile = selectedEmployee.mobileNumber?.toString().trim()\r\n    const pincode = selectedEmployee.pincode?.toString().trim()\r\n    const email = selectedEmployee.email?.toString().trim().toLowerCase()\r\n\r\n    // Aadhaar validation\r\n    if (!aadhaar) {\r\n      newErrors.aadhaarNo = 'Aadhaar is required'\r\n      firstInvalidField ||= 'aadhaar'\r\n    } else if (!/^\\d{12}$/.test(aadhaar)) {\r\n      newErrors.aadhaarNo = 'Aadhaar must be exactly 12 digits'\r\n      firstInvalidField ||= 'aadhaar'\r\n    }\r\n\r\n    // PAN validation\r\n    // if (!pan) {\r\n    //   newErrors.panNo = 'PAN is required'\r\n    //   firstInvalidField ||= 'pan'\r\n    // } else if (!/^[A-Z]{5}[0-9]{4}[A-Z]$/.test(pan)) {\r\n    //   newErrors.panNo = 'PAN format is invalid (e.g. ABCDE1234F)'\r\n    //   firstInvalidField ||= 'pan'\r\n    // }\r\n\r\n    if (pan && !/^[A-Z]{5}[0-9]{4}[A-Z]$/.test(pan)) {\r\n      newErrors.panNo = 'PAN format is invalid (e.g. ABCDE1234F)'\r\n      firstInvalidField ||= 'pan'\r\n    }\r\n\r\n    // Mobile number validation\r\n    // if (!mobile) {\r\n    //   newErrors.mobileNumber = 'Mobile number is required'\r\n    //   firstInvalidField ||= 'mobile'\r\n    // } else if (!/^[6-9]\\d{9}$/.test(mobile)) {\r\n    //   newErrors.mobileNumber = 'Mobile number must be exactly 10 digits'\r\n    //   firstInvalidField ||= 'mobile'\r\n    // }\r\n\r\n    //     const rawMobile = selectedEmployee.mobileNumber?.toString().trim()\r\n\r\n    //  mobile = rawMobile.replace(/^0+/, '') // remove leading 0s\r\n\r\n    const rawMobile = selectedEmployee.mobileNumber?.toString().trim()\r\n\r\n    mobile = null\r\n    if (rawMobile) {\r\n      mobile = rawMobile.replace(/^0+/, '') // remove leading 0s\r\n    }\r\n\r\n    if (!mobile) {\r\n      newErrors.mobileNumber = 'Mobile number is required'\r\n      firstInvalidField ||= 'mobile'\r\n    } else if (!/^[6-9]\\d{9}$/.test(mobile)) {\r\n      newErrors.mobileNumber =\r\n        'Mobile number must be exactly 10 digits starting with 6-9'\r\n      firstInvalidField ||= 'mobile'\r\n    }\r\n\r\n    if (email) {\r\n      if (!isEmailValid(email)) {\r\n        newErrors.email = 'Invalid email address'\r\n        firstInvalidField ||= 'email'\r\n      }\r\n    }\r\n\r\n    setErrors(newErrors)\r\n\r\n    // Focus the first invalid field\r\n    if (firstInvalidField === 'aadhaar' && aadharRef.current) {\r\n      aadharRef.current.focus()\r\n    } else if (firstInvalidField === 'pan' && panRef.current) {\r\n      panRef.current.focus()\r\n    } else if (firstInvalidField === 'mobile' && mobileRef.current) {\r\n      mobileRef.current.focus()\r\n    } else if (firstInvalidField === 'email' && emailRef.current) {\r\n      emailRef.current.focus()\r\n    }\r\n\r\n    return Object.keys(newErrors).length === 0\r\n  }\r\n\r\n  useEffect(() => {\r\n    const input = document.getElementById('email')\r\n\r\n    // Check after a delay since browser applies autofill after mount\r\n    const timer = setTimeout(() => {\r\n      if (input && input.value && input.value !== selectedEmployee.email) {\r\n        // Sync DOM value into React state\r\n        handleInputChange({\r\n          target: {\r\n            name: 'email',\r\n            value: input.value,\r\n          },\r\n        })\r\n\r\n        // Trigger validation\r\n        if (!isEmailValid(input.value.trim())) {\r\n          setErrors((prev) => ({ ...prev, email: 'Invalid email address' }))\r\n        } else {\r\n          setErrors((prev) => {\r\n            const { email, ...rest } = prev\r\n            return rest\r\n          })\r\n        }\r\n      }\r\n    }, 500) // delay in ms\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const el = document.getElementById('email')\r\n    if (el) {\r\n      el.focus()\r\n      el.blur() // triggers onBlur to apply validation/tick\r\n    }\r\n  }, [])\r\n\r\n  const validatePhoneNumber = (value) => {\r\n    const isValidPhoneNumber = validator.isMobilePhone(value)\r\n    return isValidPhoneNumber\r\n  }\r\n\r\n  function handleEditClick(ppo_no) {\r\n    // Copy the selected employee's data\r\n    setErrors({})\r\n    setEditModalVisible(true)\r\n    const filteredEmployees = data.find((emp) => emp.ppoNo === ppo_no)\r\n    setSelectedEmployee(filteredEmployees)\r\n    setEditModalVisible(true)\r\n    console.log(filteredEmployees)\r\n    setIsChecked(false)\r\n  }\r\n\r\n  // function handleSearch(searchPpo) {\r\n  //   // console.log(\"data\")\r\n  //   // console.log(searchPpo)\r\n  //   console.log('Searching for PPO:', searchPpo)\r\n\r\n  //   const searchEmployees = data.find((emp) => emp.ppoNo === Number(searchPpo))\r\n  //   // setEmployees(searchEmployees)\r\n  //   console.log(searchEmployees)\r\n  //   if (searchEmployees !== undefined && searchEmployees !== null) {\r\n  //     setSearchedData(searchEmployees)\r\n  //   }\r\n  // }\r\n  // console.log('test')\r\n  // console.log(Object.keys(searchedData).length )\r\n\r\n  // const handleInputChange = (e) => {\r\n  //   console.log('e.target.name', e.target.name)\r\n\r\n  //   const { name, value } = e.target\r\n  //   setSelectedEmployee((prev) => ({ ...prev, [name]: value }))\r\n  // }\r\n\r\n  const isPanValid = (pan) => /^[A-Z]{5}[0-9]{4}[A-Z]$/.test(pan)\r\n  const isEmailValid = (email) => {\r\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)\r\n  }\r\n  const handleInputChange = (e) => {\r\n    console.log(errors, 'errors')\r\n\r\n    const { name } = e.target\r\n    let { value } = e.target\r\n\r\n    if (!['addressLine1', 'addressLine2', 'addressLine3'].includes(name)) {\r\n      value = value.trim()\r\n    }\r\n\r\n    let newErrors = { ...errors }\r\n\r\n    if (name === 'aadhaarNo') {\r\n      // Strip all non-digit chars\r\n      value = value.replace(/\\D/g, '')\r\n\r\n      // Limit length to 12 digits\r\n      if (value?.length > 12) value = value.slice(0, 12)\r\n\r\n      // Validate length\r\n      if (value?.length !== 12) {\r\n        newErrors.aadhaarNo = 'Aadhaar number must be exactly 12 digits'\r\n      } else {\r\n        delete newErrors.aadhaarNo\r\n      }\r\n\r\n      setSelectedEmployee((prev) => ({ ...prev, [name]: value }))\r\n    } else if (name === 'panNo') {\r\n      // Force uppercase\r\n      value = value.toUpperCase()\r\n\r\n      console.log('pan value', value)\r\n\r\n      if (value === '') {\r\n        value = null\r\n        console.log('pan value', value)\r\n        delete newErrors.panNo\r\n        setSelectedEmployee((prev) => ({ ...prev, [name]: value }))\r\n      }\r\n\r\n      // Allow only letters and digits for typing (partial regex)\r\n      else if (/^[A-Z0-9]*$/.test(value)) {\r\n        if (value?.length === 10) {\r\n          // Full PAN validation\r\n          if (/^[A-Z]{5}[0-9]{4}[A-Z]$/.test(value)) {\r\n            delete newErrors.panNo\r\n          } else {\r\n            newErrors.panNo = 'Invalid PAN format'\r\n          }\r\n        } else {\r\n          newErrors.panNo = 'PAN must be exactly 10 characters'\r\n        }\r\n\r\n        setSelectedEmployee((prev) => ({ ...prev, [name]: value }))\r\n      } else {\r\n        newErrors.panNo = 'PAN can contain only letters and digits'\r\n      }\r\n    }\r\n    //  else if (name === 'mobileNumber') {\r\n    //   // Strip non-digits and limit to 10 digits\r\n    //   value = value.replace(/\\D/g, '').slice(0, 10)\r\n    //   if (value?.length !== 10) {\r\n    //     newErrors.mobileNumber = 'Mobile number must be exactly 10 digits'\r\n    //   } else {\r\n    //     delete newErrors.mobileNumber\r\n    //   }\r\n    //   setSelectedEmployee((prev) => ({ ...prev, [name]: value }))\r\n    // }\r\n    else if (name === 'mobileNumber') {\r\n      // Strip non-digits\r\n      let cleaned = value.replace(/\\D/g, '')\r\n\r\n      // Remove leading zeros\r\n      cleaned = cleaned.replace(/^0+/, '')\r\n\r\n      // Only allow up to 10 digits\r\n      if (cleaned.length > 10) {\r\n        cleaned = cleaned.slice(0, 10)\r\n      }\r\n\r\n      // Validate\r\n      if (cleaned.length !== 10 || !/^[6-9]/.test(cleaned)) {\r\n        newErrors.mobileNumber =\r\n          'Mobile number must be exactly 10 digits and start with 6-9'\r\n      } else {\r\n        delete newErrors.mobileNumber\r\n      }\r\n\r\n      // Update state\r\n      setSelectedEmployee((prev) => ({ ...prev, [name]: cleaned }))\r\n    } else if (name === 'email') {\r\n      value = value.toLowerCase()\r\n      if (value === '' || isEmailValid(value)) {\r\n        delete newErrors.email\r\n      } else {\r\n        newErrors.email = 'Invalid email address'\r\n      }\r\n      setSelectedEmployee((prev) => ({ ...prev, [name]: value }))\r\n    } else if (name === 'pincode') {\r\n      // Strip non-digits\r\n      let cleaned = value.replace(/\\D/g, '')\r\n\r\n      // Only allow up to 6 digits\r\n      if (cleaned.length > 6) {\r\n        cleaned = cleaned.slice(0, 6)\r\n      }\r\n\r\n      // Validate\r\n      if (cleaned.length !== 6) {\r\n        newErrors.pincode = 'Pincode must be exactly 6 digits'\r\n      } else {\r\n        delete newErrors.pincode\r\n      }\r\n\r\n      setSelectedEmployee((prev) => ({ ...prev, [name]: cleaned }))\r\n    } else {\r\n      // Default update and clear error\r\n      setSelectedEmployee((prev) => ({ ...prev, [name]: value }))\r\n      delete newErrors[name]\r\n    }\r\n\r\n    setErrors(newErrors)\r\n  }\r\n\r\n  const handleCheckboxChange = (e) => {\r\n    setIsChecked(e.target.checked)\r\n    // If unchecked, clear the input values\r\n    if (e.target.checked) {\r\n      setSelectedEmployee((prev) => ({\r\n        ...prev,\r\n        [prev.permanentAddressLine1]: prev.tempAddressLine1,\r\n      }))\r\n    }\r\n  }\r\n\r\n  const handleSave = (event) => {\r\n    console.log('errors', errors)\r\n    if (validateForm()) {\r\n      console.log(selectedEmployee)\r\n      console.log('selectedEmployee')\r\n\r\n      let url = ServiceURL.saveApiData\r\n\r\n      // Update employees list with the new selectedEmployee\r\n      setEmployees((prevEmployees) =>\r\n        prevEmployees.map((emp) =>\r\n          emp.ppoNo === selectedEmployee.ppoNo\r\n            ? { ...emp, ...selectedEmployee, flag: 'MD', userName: user } // update flag here too\r\n            : emp,\r\n        ),\r\n      )\r\n\r\n      // Create updated object with flag = 'MD'\r\n      const userData = {\r\n        ...selectedEmployee,\r\n        flag: 'MD',\r\n        userName: user,\r\n      }\r\n\r\n      let p = CallApi.callEndPoint(url, userData)\r\n      p.then((response) => {\r\n        console.log(response)\r\n        if (response.message === 'success') {\r\n          setValidated(true)\r\n          setEditModalVisible(false)\r\n          setAadharNumber(0)\r\n          setPanNumber(' ')\r\n          setEmail('')\r\n          setSelectedEmployee({})\r\n          setErrors({})\r\n          alert('Data updated Successfully')\r\n\r\n          handleChange(selectedEmployee.pensionerTypeId) // or pass the correct param your handleChange expects\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  //  useEffect(() => {\r\n\r\n  //   setData(employees);\r\n\r\n  // },[employees,typeOfPrensioner]);\r\n\r\n  // const validatePhoneNumber = (number) => {\r\n  //   const regex = /^[1-9]\\d{9}$/; // Matches exactly 10 digits, starting with a non-zero\r\n  //   return regex.test(number);\r\n  // };\r\n\r\n  function handleChange(input) {\r\n    setTypeOfPensioner(input)\r\n    setSearchedData({})\r\n    setLoading(true) // Show loader\r\n\r\n    let url = ServiceURL.getApiData\r\n\r\n    const userData1 = {\r\n      paymentOfficeId: officeId,\r\n      pensionerTypeId: input,\r\n    }\r\n\r\n    let p = CallApi.callEndPoint(url, userData1)\r\n    p.then((response) => {\r\n      setTimeout(() => {\r\n        setData(response)\r\n        setSearchedData(response)\r\n        setEmployees(response)\r\n        setLoading(false) // Hide loader after 2 seconds\r\n      }, 1000) // 2 seconds delay\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"ms-3\">\r\n      {/* <label>Pensioner</label> <input type='radio' onClick={()=>{handleChange('P')}}/>\r\n    <label>Family Pensioner</label> <input type='radio' onClick={()=>{handleChange('F')}}/> */}\r\n\r\n      <CRow>\r\n        <CButtonGroup\r\n          role=\"group\"\r\n          aria-label=\"Basic checkbox toggle button group\"\r\n        >\r\n          <CFormCheck\r\n            type=\"radio\"\r\n            id=\"Pensioner\"\r\n            name=\"options\"\r\n            onClick={() => {\r\n              handleChange('P')\r\n            }}\r\n            button={{ color: 'primary', variant: 'outline' }}\r\n            autoComplete=\"off\"\r\n            label=\"Pensioner\"\r\n          />\r\n          <CFormCheck\r\n            type=\"radio\"\r\n            id=\"FamilyPensioner\"\r\n            name=\"options\"\r\n            button={{ color: 'primary', variant: 'outline' }}\r\n            autoComplete=\"off\"\r\n            onClick={() => {\r\n              handleChange('F')\r\n            }}\r\n            label=\"Family Pensioner\"\r\n          />\r\n\r\n          <CCol md={8}>\r\n            {/* {typeOfPrensioner === 'F' ? (\r\n              <>\r\n                <Reports data={data} fileName=\"FamilyPensioner\" />\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Reports data={data} fileName=\"Pensioner\" />\r\n              </>\r\n            )} */}\r\n          </CCol>\r\n        </CButtonGroup>\r\n      </CRow>\r\n\r\n      <CRow>\r\n        <CCol md={6}>\r\n          {/* <CFormInput\r\n            className=\"m-2\"\r\n            type=\"number\"\r\n            id=\"ppoSearch\"\r\n            name=\"ppoSearch\"\r\n            placeholder=\"SEARCH BY PPO\"\r\n            value={searchPpo}\r\n            onChange={(e) => setSearchPpo(e.target.value)}\r\n          /> */}\r\n          <CFormInput\r\n            className=\"m-2\"\r\n            type=\"text\" // Use text to allow full control\r\n            id=\"ppoSearch\"\r\n            name=\"ppoSearch\"\r\n            placeholder=\"SEARCH BY PPO\"\r\n            value={searchPpo}\r\n            onChange={(e) => {\r\n              // const value = e.target.value\r\n              // if (/^\\d*$/.test(value)) {\r\n              //   setSearchPpo(value) // only set if value is numeric\r\n              // }\r\n              // const value = e.target.value\r\n              // if (/^\\d*$/.test(value)) {\r\n              //   setSearchPpo(value) // only set if value is numeric\r\n              // }\r\n              handleSearchPpo(e.target.value, 'search')\r\n            }}\r\n          />\r\n        </CCol>\r\n\r\n        {/* <CCol md={2}>\r\n          <CButton className=\"m-2\" onClick={() => handleSearch(searchPpo)}>\r\n            Search\r\n          </CButton>\r\n        </CCol> */}\r\n      </CRow>\r\n      <CRow>\r\n        <CCol md={12}>\r\n          <CCardHeader>\r\n            {typeOfPrensioner === 'F' ? (\r\n              <>\r\n                <h5 className=\"text-center fw-bold\">FAMILY PENSIONER DATA</h5>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <h5 className=\"text-center fw-bold\">PENSIONER DATA</h5>\r\n              </>\r\n            )}\r\n          </CCardHeader>\r\n        </CCol>\r\n      </CRow>\r\n\r\n      <CTable hover>\r\n        <CTableHead>\r\n          <CTableRow>\r\n            <CTableHeaderCell scope=\"col\">PPO NO</CTableHeaderCell>\r\n            <CTableHeaderCell scope=\"col\">\r\n              {typeOfPrensioner === 'P'\r\n                ? 'Pensioner Name'\r\n                : 'Family Pensioner Name'}\r\n            </CTableHeaderCell>\r\n            <CTableHeaderCell scope=\"col\">Mobile No</CTableHeaderCell>\r\n            <CTableHeaderCell scope=\"col\">Aadhaar No</CTableHeaderCell>\r\n            <CTableHeaderCell scope=\"col\">Actions</CTableHeaderCell>\r\n          </CTableRow>\r\n        </CTableHead>\r\n\r\n        {loading ? (\r\n          <tbody>\r\n            <tr>\r\n              <td colSpan={5}>\r\n                <div\r\n                  style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    height: '200px', // limited height area\r\n                    width: '100%',\r\n                  }}\r\n                >\r\n                  <ScaleLoader color=\"#007bff\" />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        ) : (\r\n          <CTableBody>\r\n            {data.map((emp, index) => (\r\n              <CTableRow key={index}>\r\n                <CTableDataCell>{emp.ppoNo}</CTableDataCell>\r\n                <CTableDataCell>{emp.name}</CTableDataCell>\r\n                <CTableDataCell>{emp.mobileNumber}</CTableDataCell>\r\n                <CTableDataCell>{emp.aadhaarNo}</CTableDataCell>\r\n                <CTableDataCell>\r\n                  <CButton\r\n                    color=\"primary\"\r\n                    onClick={() => handleEditClick(emp.ppoNo)}\r\n                  >\r\n                    Edit\r\n                  </CButton>\r\n                </CTableDataCell>\r\n              </CTableRow>\r\n            ))}\r\n          </CTableBody>\r\n        )}\r\n      </CTable>\r\n\r\n      {/* <>   {selectedEmployee.map((emp, index) => ( */}\r\n      <CModal\r\n        backdrop=\"static\"\r\n        visible={editModalVisible}\r\n        onClose={() => setEditModalVisible(false)}\r\n        size=\"xl\"\r\n      >\r\n        <CModalHeader>\r\n          {typeOfPrensioner === 'P' ? (\r\n            <>\r\n              <CModalTitle className=\"text-center w-100\">\r\n                <strong>Edit Pensioner Details</strong>\r\n              </CModalTitle>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <CModalTitle className=\"text-center w-100\">\r\n                <strong>Edit Family Pensioner Details</strong>\r\n              </CModalTitle>\r\n            </>\r\n          )}\r\n        </CModalHeader>\r\n        <CModalBody>\r\n          <CRow>\r\n            {/* {console.log(selectedEmployee)} */}\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"ppoNo\">PPO No</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"ppoNo\"\r\n                value={selectedEmployee.ppoNo}\r\n                disabled\r\n              />\r\n            </CCol>\r\n\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"pType\">Pension Type</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"pType\"\r\n                value={selectedEmployee.pensionerType}\r\n                disabled\r\n              />\r\n            </CCol>\r\n            {typeOfPrensioner === 'F' ? (\r\n              <>\r\n                <CModalTitle className=\"text-center mt-1 w-100\">\r\n                  <strong>Family Pensioner Details</strong>\r\n                </CModalTitle>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <>\r\n                  <CModalTitle className=\"text-center mt-1 w-100\">\r\n                    <strong>Pensioner Details</strong>\r\n                  </CModalTitle>\r\n                </>\r\n              </>\r\n            )}\r\n          </CRow>\r\n          <CRow>\r\n            <CCol md={10}>\r\n              <CFormLabel htmlFor=\"empName\">Pensioner Name</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"empName\"\r\n                value={selectedEmployee.name}\r\n                disabled\r\n              />\r\n            </CCol>\r\n\r\n            {/* <CCol md={2}>\r\n              <CFormLabel htmlFor=\"empInital\">Initial</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"empInital\"\r\n                value={selectedEmployee.pensionerInitial}\r\n                disabled\r\n              />\r\n            </CCol> */}\r\n          </CRow>\r\n\r\n          {typeOfPrensioner === 'P' ? (\r\n            <>\r\n              <CRow>\r\n                <CCol md={6} className=\"mt-3\">\r\n                  <CFormLabel htmlFor=\"gender\">Gender</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"Gender\"\r\n                    value={selectedEmployee.gender}\r\n                    disabled\r\n                  />\r\n                </CCol>\r\n                <CCol md={6} className=\"mt-3\">\r\n                  <CFormLabel htmlFor=\"dob\">Date of Birth</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"date\"\r\n                    id=\"dob\"\r\n                    value={selectedEmployee.dateOfBirth}\r\n                    disabled\r\n                  />\r\n                </CCol>\r\n\r\n                {/* <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"dor\">Date of Retirement </CFormLabel>\r\n                  <CFormInput\r\n                    type=\"date\"\r\n                    id=\"dor\"\r\n                    name=\"dateOfRetirement\"\r\n                    value={selectedEmployee.dateOfRetirement}\r\n                    onChange={handleInputChange}\r\n                    disabled\r\n                  />\r\n                </CCol> */}\r\n              </CRow>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <CRow>\r\n                <CCol md={6} className=\"mt-3\">\r\n                  <CFormLabel htmlFor=\"gender\">Gender</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"Gender\"\r\n                    value={selectedEmployee.gender}\r\n                    disabled\r\n                  />\r\n                </CCol>\r\n\r\n                <CCol md={6} className=\"mt-3\">\r\n                  <CFormLabel htmlFor=\"dob\">Date of Birth</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"date\"\r\n                    id=\"dob\"\r\n                    value={selectedEmployee.dateOfBirth}\r\n                    disabled\r\n                  />\r\n                </CCol>\r\n                {/* <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"relation\">Relation</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"relation\"\r\n                    value={selectedEmployee.relation}\r\n                    disabled\r\n                  />\r\n                </CCol> */}\r\n              </CRow>\r\n            </>\r\n          )}\r\n          <CRow>\r\n            {typeOfPrensioner === 'P' ? (\r\n              <>\r\n                {/* <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"grossPay\">Gross Pension</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"grossPay\"\r\n                    value={selectedEmployee.grossPay}\r\n                    disabled\r\n                  />\r\n                </CCol>\r\n\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"netPay\">Net Pension</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"netPay\"\r\n                    value={selectedEmployee.netPay}\r\n                    disabled\r\n                  />\r\n                </CCol> */}\r\n              </>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </CRow>\r\n          {/* <CRow>\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"dob\">Date of Birth</CFormLabel>\r\n              <CFormInput\r\n                type=\"date\"\r\n                id=\"dob\"\r\n                value={selectedEmployee.dateOfBirth}\r\n                disabled\r\n              />\r\n            </CCol>\r\n            {typeOfPrensioner === 'P' ? (\r\n              <>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"empID\">Employee Id</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"empID\"\r\n                    name=\"employeeId\"\r\n                    value={selectedEmployee.employeeId}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </CCol>\r\n              </>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </CRow> */}\r\n          {/* <CRow>\r\n            {typeOfPrensioner === 'F' ? (\r\n              <>\r\n                {' '}\r\n                <CModalTitle className=\"text-center w-100\">\r\n                  <strong>Employee Details</strong>\r\n                </CModalTitle>\r\n              </>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </CRow> */}\r\n\r\n          {typeOfPrensioner === 'F' ? (\r\n            <>\r\n              <CRow>\r\n                {/* <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"empID\">Employee Id</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"empID\"\r\n                    name=\"employeeId\"\r\n                    value={selectedEmployee.employeeId}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </CCol>\r\n                <CCol md={6}>\r\n                  <CFormLabel htmlFor=\"empName\">Employee Name</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"empName\"\r\n                    name=\"employeeName\"\r\n                    value={selectedEmployee.employeeName}\r\n                    onChange={handleInputChange}\r\n                    invalid={!!errors.employeeName}\r\n                    feedback={errors.employeeName}\r\n                  />\r\n                </CCol> */}\r\n              </CRow>{' '}\r\n            </>\r\n          ) : (\r\n            <>\r\n              {/* <CRow> */}\r\n              {/* <CCol md={6}>\r\n            <CFormLabel htmlFor=\"empName\">Employee Name</CFormLabel>\r\n            <CFormInput type='text'  id=\"empName\" name=\"employeeName\" value={selectedEmployee.employeeName} disabled />\r\n              </CCol> */}\r\n              {/* </CRow>{' '} */}\r\n            </>\r\n          )}\r\n\r\n          {/* <CRow>\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"designation\">Designation</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"designation\"\r\n                name=\"designation\"\r\n                value={selectedEmployee.designation}\r\n                onChange={handleInputChange}\r\n                invalid={!!errors.designation}\r\n                feedback={errors.designation}\r\n              />\r\n            </CCol>\r\n            <CCol md={6}>\r\n              {typeOfPrensioner === 'F' ? (\r\n                <>\r\n                  <CFormLabel htmlFor=\"dateOfDeath\">Date of Death</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"date\"\r\n                    id=\"dateOfDeath\"\r\n                    name=\"dateOfDeath\"\r\n                    value={selectedEmployee.dateOfDeath}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </CCol>\r\n          </CRow> */}\r\n\r\n          <CRow>\r\n            {/* {typeOfPrensioner === 'F' ? (\r\n              <>\r\n                <CModalTitle className=\"text-center mt-1 w-100\">\r\n                  <strong>Family Pensioner Details</strong>\r\n                </CModalTitle>\r\n              </>\r\n            ) : (\r\n              <></>\r\n            )} */}\r\n            <CCol md={6} className=\"mt-3\">\r\n              <CFormLabel htmlFor=\"panno\">PAN NO</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                maxLength=\"10\"\r\n                id=\"panNo\"\r\n                name=\"panNo\"\r\n                autoComplete=\"off\"\r\n                autoCorrect=\"off\"\r\n                spellCheck=\"false\"\r\n                placeholder={validated ? '' : 'Valid Pan Num'}\r\n                value={selectedEmployee.panNo}\r\n                onChange={handleInputChange}\r\n                invalid={!!errors.panNo}\r\n                ref={panRef}\r\n                valid={!errors.panNo && isPanValid(selectedEmployee.panNo)}\r\n                feedback={errors.panNo}\r\n              />\r\n              {errors.panNo && (\r\n                <div className=\"text-danger\">{errors.panNumber}</div>\r\n              )}\r\n            </CCol>\r\n\r\n            <CCol md={6} className=\"mt-3\">\r\n              {/* <CFormLabel htmlFor=\"aadhaarNo\">AADHAAR NO</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                maxLength=\"12\"\r\n                id=\"aadhaarNo\"\r\n                name=\"aadhaarNo\" // match the key in selectedEmployee\r\n                value={selectedEmployee.aadhaarNo}\r\n                onChange={handleInputChange}\r\n                invalid={!!errors.aadhaarNo}\r\n                feedback={errors.aadhaarNo}\r\n                valid={\r\n                  !errors.aadhaarNo && selectedEmployee.aadhaarNo?.length === 12\r\n                }\r\n              /> */}\r\n\r\n              <CFormLabel htmlFor=\"aadhaarNo\">Aadhaar</CFormLabel>\r\n\r\n              <CFormInput\r\n                type=\"text\"\r\n                maxLength=\"12\"\r\n                id=\"aadhaarNo\"\r\n                name=\"aadhaarNo\"\r\n                autoComplete=\"off\"\r\n                autoCorrect=\"off\"\r\n                spellCheck=\"false\"\r\n                value={selectedEmployee.aadhaarNo || ''}\r\n                onChange={handleInputChange}\r\n                invalid={!!errors.aadhaarNo}\r\n                ref={aadharRef}\r\n                valid={\r\n                  !errors.aadhaarNo && selectedEmployee.aadhaarNo?.length === 12\r\n                }\r\n                disabled={selectedEmployee.aadhaarStatus === 'VALID AADHAAR'}\r\n              />\r\n              {selectedEmployee.aadhaarStatus === 'VALID AADHAAR' && (\r\n                <small className=\"text-muted\">\r\n                  Editing Aadhaar is disabled (Verified)\r\n                </small>\r\n              )}\r\n              {errors.aadhaarNo && (\r\n                <div className=\"text-danger\">{errors.aadhaarNo}</div>\r\n              )}\r\n            </CCol>\r\n          </CRow>\r\n\r\n          <CRow className=\"mt-3\">\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"mobileNumber\">Mobile No</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"mobileNumber\"\r\n                name=\"mobileNumber\"\r\n                autoComplete=\"off\"\r\n                autoCorrect=\"off\"\r\n                spellCheck=\"false\"\r\n                value={selectedEmployee.mobileNumber}\r\n                onChange={handleInputChange}\r\n                required\r\n                invalid={!!errors.mobileNumber}\r\n                ref={mobileRef}\r\n                feedback={errors.mobileNumber}\r\n                valid={\r\n                  !errors.mobileNumber &&\r\n                  selectedEmployee.mobileNumber?.length === 10\r\n                }\r\n              />\r\n            </CCol>\r\n\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"email\">Email</CFormLabel>\r\n              <CFormInput\r\n                type=\"email\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                autoComplete=\"off\"\r\n                autoCorrect=\"off\"\r\n                spellCheck=\"false\"\r\n                ref={emailRef}\r\n                value={selectedEmployee.email || ''}\r\n                onChange={handleInputChange}\r\n                onBlur={() => {\r\n                  const email = selectedEmployee.email?.trim()\r\n                  if (email && !isEmailValid(email)) {\r\n                    setErrors((prev) => ({\r\n                      ...prev,\r\n                      email: 'Invalid email address',\r\n                    }))\r\n                  } else {\r\n                    setErrors((prev) => {\r\n                      const { email, ...rest } = prev\r\n                      return rest\r\n                    })\r\n                  }\r\n                }}\r\n                valid={\r\n                  selectedEmployee.email?.length > 0 &&\r\n                  isEmailValid(selectedEmployee.email) &&\r\n                  !errors.email\r\n                }\r\n                invalid={!!errors.email}\r\n              />\r\n            </CCol>\r\n          </CRow>\r\n\r\n          {/* <CFormLabel\r\n            className=\"text-center w-100 large-label className='fw-bold' \"\r\n            htmlFor=\"input1\"\r\n          >\r\n            <strong> Temporary Address</strong>\r\n          </CFormLabel>\r\n          <CRow>\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"tempAddressLine1\">Address 1</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"tempAddressLine1\"\r\n                name=\"tempAddressLine1\"\r\n                value={selectedEmployee.tempAddressLine1}\r\n                onChange={handleInputChange}\r\n                invalid={!!errors.tempAddressLine1}\r\n                feedback={errors.tempAddressLine1}\r\n                required\r\n              />\r\n            </CCol>\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"tempAddressLine2\">Address 2</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"tempAddressLine2\"\r\n                name=\"tempAddressLine2\"\r\n                value={selectedEmployee.tempAddressLine2}\r\n                onChange={handleInputChange}\r\n                required\r\n                invalid={!!errors.tempAddressLine2}\r\n                feedback={errors.tempAddressLine2}\r\n              />\r\n            </CCol>\r\n          </CRow>\r\n          <CRow>\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"tempAddressLine3\">Address 3</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"tempAddressLine3\"\r\n                name=\"tempAddressLine3\"\r\n                value={selectedEmployee.tempAddressLine3}\r\n                onChange={handleInputChange}\r\n                invalid={!!errors.tempAddressLine3}\r\n                feedback={errors.tempAddressLine3}\r\n                required\r\n              />\r\n            </CCol>\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"tempPincode\">Postal Code</CFormLabel>\r\n              <CFormInput\r\n                type=\"number\"\r\n                id=\"tempPincode\"\r\n                name=\"tempPincode\"\r\n                value={selectedEmployee.tempPinCode}\r\n                onChange={handleInputChange}\r\n                invalid={!!errors.tempPin}\r\n                feedback={errors.tempPin}\r\n                required\r\n              />\r\n            </CCol>\r\n          </CRow>\r\n\r\n          <CRow>\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"tempDistrict\">District</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"tempDistrict\"\r\n                name=\"tempDistrict\"\r\n                onChange={handleInputChange}\r\n                value={selectedEmployee.tempDistrict}\r\n                invalid={!!errors.tempDistrict}\r\n                feedback={errors.tempDistrict}\r\n                required\r\n              />\r\n            </CCol>\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"tempState\">State</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"tempState\"\r\n                name=\"tempState\"\r\n                onChange={handleInputChange}\r\n                value={selectedEmployee.tempState}\r\n                invalid={!!errors.tempState}\r\n                feedback={errors.tempState}\r\n                required\r\n              />\r\n            </CCol>\r\n          </CRow> */}\r\n\r\n          {/* <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isChecked}\r\n            onChange={handleCheckboxChange}\r\n          />\r\n          {' '}Check to enable Input 1\r\n        </label> */}\r\n\r\n          {/* <CFormLabel\r\n            className=\"text-center w-100 large-label className='fw-bold' \"\r\n            htmlFor=\"input1\"\r\n          >\r\n            <strong>Address</strong>\r\n          </CFormLabel> */}\r\n          <CModalTitle className=\"text-center w-100 mt-3\">\r\n            <strong>Address</strong>\r\n          </CModalTitle>\r\n\r\n          <CRow>\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"addressLine1\">Address 1</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"addressLine1\"\r\n                name=\"addressLine1\"\r\n                value={selectedEmployee.addressLine1}\r\n                onChange={handleInputChange}\r\n                invalid={!!errors.addressLine1}\r\n                feedback={errors.addressLine1}\r\n              />\r\n            </CCol>\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"addressLine2\">Address 2</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"addressLine2\"\r\n                name=\"addressLine2\"\r\n                value={selectedEmployee.addressLine2}\r\n                onChange={handleInputChange}\r\n                required\r\n                invalid={!!errors.addressLine2}\r\n                feedback={errors.addressLine2}\r\n              />\r\n            </CCol>\r\n          </CRow>\r\n          <CRow>\r\n            <CCol md={6} className=\"mt-3\">\r\n              <CFormLabel htmlFor=\"addressLine3\">Address 3</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"addressLine3\"\r\n                name=\"addressLine3\"\r\n                value={selectedEmployee.addressLine3}\r\n                onChange={handleInputChange}\r\n                required\r\n                invalid={!!errors.addressLine3}\r\n                feedback={errors.addressLine3}\r\n              />\r\n            </CCol>\r\n            <CCol md={6} className=\"mt-3\">\r\n              <CFormLabel htmlFor=\"pincode\">Postal Code</CFormLabel>\r\n              <CFormInput\r\n                type=\"number\"\r\n                id=\"pincode\"\r\n                name=\"pincode\"\r\n                maxLength=\"6\"\r\n                value={selectedEmployee.pincode}\r\n                onChange={handleInputChange}\r\n                required\r\n                valid={\r\n                  !errors.pincode && selectedEmployee.pincode?.length === 6\r\n                }\r\n                invalid={!!errors.pincode}\r\n                feedback={errors.pincode}\r\n              />\r\n            </CCol>\r\n          </CRow>\r\n\r\n          {/* <CCol md={6} className=\"mt-3\">\r\n              <CFormLabel htmlFor=\"state\">State</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"state\"\r\n                name=\"state\"\r\n                value={selectedEmployee.state}\r\n                onChange={handleInputChange}\r\n                invalid={!!errors.state}\r\n                feedback={errors.state}\r\n                required\r\n              />\r\n            </CCol> */}\r\n          {/* /Testing / */}\r\n          {/* <CRow className=\"mt-3\">\r\n            <CCol md={6} className=\"mt-5\">\r\n              <CFormCheck\r\n                type=\"checkbox\"\r\n                label=\"Is the state other than Tamil Nadu?\"\r\n                checked={isOtherState}\r\n                onChange={() => {\r\n                  setIsOtherState(!isOtherState)\r\n                  setSelectedEmployee((prev) => ({\r\n                    ...prev,\r\n                    state: !isOtherState ? '' : 'Tamil Nadu',\r\n                  }))\r\n                }}\r\n              />\r\n            </CCol>\r\n\r\n            <CCol md={6} className=\"mt-3\">\r\n              <CFormLabel htmlFor=\"state\">State</CFormLabel>\r\n              {!isOtherState ? (\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"state\"\r\n                  name=\"state\"\r\n                  value={selectedEmployee.state}\r\n                  onChange={handleInputChange}\r\n                  invalid={!!errors.state}\r\n                  feedback={errors.state}\r\n                  required\r\n                  readOnly\r\n                />\r\n              ) : (\r\n                <CFormSelect\r\n                  id=\"state\"\r\n                  name=\"state\"\r\n                  value={selectedEmployee.state}\r\n                  onChange={handleInputChange}\r\n                  invalid={!!errors.state}\r\n                  feedback={errors.state}\r\n                  required\r\n                >\r\n                  <option value=\"\">-- Select State --</option>\r\n                  {statesList\r\n                    .filter((s) => s !== 'Tamil Nadu')\r\n                    .map((state) => (\r\n                      <option key={state} value={state}>\r\n                        {state}\r\n                      </option>\r\n                    ))}\r\n                </CFormSelect>\r\n              )}\r\n            </CCol>\r\n          </CRow> */}\r\n\r\n          <CRow className=\"mt-3 align-items-center\">\r\n            {/* State Selection */}\r\n            <CCol md={6} className=\"mt-2\">\r\n              <CFormCheck\r\n                type=\"checkbox\"\r\n                label=\"Is the state other than Tamil Nadu?\"\r\n                checked={isOtherState}\r\n                // style={{\r\n                //   accentColor: '#007bff',\r\n                //   width: '20px',\r\n                //   height: '20px',\r\n                // }} // changes checkbox color & size\r\n                className=\"custom-checkbox-label custom-checkbox\"\r\n                inputClassName=\"custom-checkbox-input\" //\r\n                onChange={() => {\r\n                  const newIsOtherState = !isOtherState\r\n                  setIsOtherState(newIsOtherState)\r\n                  setSelectedEmployee((prev) => ({\r\n                    ...prev,\r\n                    state: newIsOtherState ? '' : 'Tamil Nadu',\r\n                    district: '', // Reset district on change\r\n                  }))\r\n                }}\r\n              />\r\n            </CCol>\r\n\r\n            <CCol md={6}>\r\n              <CFormLabel htmlFor=\"state\">State</CFormLabel>\r\n              {!isOtherState ? (\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"state\"\r\n                  name=\"state\"\r\n                  value={selectedEmployee.state}\r\n                  readOnly\r\n                  onChange={handleInputChange}\r\n                  invalid={!!errors.state}\r\n                  feedback={errors.state}\r\n                  required\r\n                />\r\n              ) : (\r\n                <CFormSelect\r\n                  id=\"state\"\r\n                  name=\"state\"\r\n                  value={selectedEmployee.state}\r\n                  onChange={(e) => {\r\n                    handleInputChange(e)\r\n                    setSelectedEmployee((prev) => ({\r\n                      ...prev,\r\n                      district: '',\r\n                    }))\r\n                  }}\r\n                  invalid={!!errors.state}\r\n                  feedback={errors.state}\r\n                  required\r\n                >\r\n                  <option value=\"\">-- Select State --</option>\r\n                  {statesList\r\n                    .filter((s) => s !== 'Tamil Nadu')\r\n                    .map((state) => (\r\n                      <option key={state} value={state}>\r\n                        {state}\r\n                      </option>\r\n                    ))}\r\n                </CFormSelect>\r\n              )}\r\n            </CCol>\r\n\r\n            {/* District Selection */}\r\n            <CCol md={6} className=\"mt-3\">\r\n              <CFormLabel htmlFor=\"district\">District</CFormLabel>\r\n              {selectedEmployee.state === 'Tamil Nadu' ? (\r\n                <CFormSelect\r\n                  id=\"district\"\r\n                  name=\"district\"\r\n                  value={selectedEmployee.district}\r\n                  onChange={handleInputChange}\r\n                  invalid={!!errors.district}\r\n                  feedback={errors.district}\r\n                  required\r\n                >\r\n                  <option value=\"\">-- Select District --</option>\r\n                  {districtsList.map((district) => (\r\n                    <option key={district} value={district}>\r\n                      {district}\r\n                    </option>\r\n                  ))}\r\n                </CFormSelect>\r\n              ) : (\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"district\"\r\n                  name=\"district\"\r\n                  value={selectedEmployee.district}\r\n                  onChange={handleInputChange}\r\n                  invalid={!!errors.district}\r\n                  feedback={errors.district}\r\n                  required\r\n                />\r\n              )}\r\n            </CCol>\r\n          </CRow>\r\n        </CModalBody>\r\n        <CModalFooter>\r\n          <CButton color=\"secondary\" onClick={() => setEditModalVisible(false)}>\r\n            Cancel\r\n          </CButton>\r\n          <CButton\r\n            color=\"primary\"\r\n            onClick={handleSave}\r\n            noValidate\r\n            validated={validated}\r\n          >\r\n            Save Changes\r\n          </CButton>\r\n        </CModalFooter>\r\n      </CModal>\r\n    </div>\r\n\r\n    //  </>\r\n  )\r\n}\r\nexport default PensionerFormDetails\r\n","import React from 'react'\r\nimport { saveAs } from 'file-saver'\r\nimport * as XLSX from 'xlsx'\r\nimport { CButton } from '@coreui/react'\r\n\r\nconst Reports = ({ data, fileName }) => {\r\n  const exportToExcel = () => {\r\n    const worksheet = XLSX.utils.json_to_sheet(data)\r\n    const workbook = XLSX.utils.book_new()\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1')\r\n    const excelBuffer = XLSX.write(workbook, {\r\n      bookType: 'xlsx',\r\n      type: 'array',\r\n    })\r\n    const blob = new Blob([excelBuffer], { type: 'application/octet-stream' })\r\n    saveAs(blob, `${fileName}.xlsx`)\r\n  }\r\n\r\n  return (\r\n    // <button onClick={exportToExcel}>Export to Excel</button>\r\n    <CButton onClick={exportToExcel} color=\"warning\" className=\"rounded m-2\">\r\n      Export to Excel\r\n    </CButton>\r\n  )\r\n}\r\n\r\nexport default Reports\r\n"],"names":["PensionerFormDetails","_selectedEmployee$aad2","_selectedEmployee$mob3","_selectedEmployee$ema3","_selectedEmployee$pin2","aadharRef","useRef","panRef","mobileRef","emailRef","loading","setLoading","useState","isOtherState","setIsOtherState","employees","setEmployees","editModalVisible","setEditModalVisible","selectedEmployee","setSelectedEmployee","validated","setValidated","errors","setErrors","phoneNumber","setPhoneNumber","aadharNumber","setAadharNumber","email","setEmail","panNumber","setPanNumber","userData","setUserData","validPinCode1","setvalidPinCode1","doj","setDOJ","data","setData","typeOfPrensioner","setTypeOfPensioner","isChecked","setIsChecked","searchedData","setSearchedData","searchPpo","setSearchPpo","debouncedSearch","setDebouncedSearch","officeId","useSelector","state","twad","office","user","userName","statesList","setStatesList","districtsList","setDistrictsList","useEffect","input","document","getElementById","timer","setTimeout","value","handleInputChange","target","name","isEmailValid","trim","prev","rest","clearTimeout","el","focus","blur","test","e","console","log","includes","newErrors","_value","_value2","replace","length","slice","aadhaarNo","toUpperCase","panNo","_value3","cleaned","mobileNumber","toLowerCase","pincode","handleChange","url","ServiceURL","userData1","paymentOfficeId","pensionerTypeId","CallApi","callEndPoint","then","response","_jsxs","className","children","_jsx","CRow","CButtonGroup","role","CFormCheck","type","id","onClick","button","color","variant","autoComplete","label","CCol","md","CFormInput","placeholder","onChange","status","searchTerm","searchValue","filter","item","ppoNo","toString","handleSearchPpo","CCardHeader","_Fragment","CTable","hover","CTableHead","CTableRow","CTableHeaderCell","scope","colSpan","style","display","justifyContent","alignItems","height","width","ScaleLoader","CTableBody","map","emp","index","CTableDataCell","CButton","ppo_no","filteredEmployees","find","handleEditClick","CModal","backdrop","visible","onClose","size","CModalHeader","CModalTitle","CModalBody","CFormLabel","htmlFor","disabled","pensionerType","gender","dateOfBirth","maxLength","autoCorrect","spellCheck","invalid","ref","valid","pan","feedback","aadhaarStatus","required","onBlur","_selectedEmployee$ema2","addressLine1","addressLine2","addressLine3","checked","inputClassName","newIsOtherState","district","CFormSelect","s","readOnly","CModalFooter","event","validateForm","_selectedEmployee$aad","_selectedEmployee$pan","_selectedEmployee$mob","_selectedEmployee$pin","_selectedEmployee$ema","_selectedEmployee$mob2","firstInvalidField","aadhaar","mobile","rawMobile","current","Object","keys","prevEmployees","flag","message","alert","noValidate","_ref","fileName","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","bookType","blob","Blob","saveAs","concat"],"sourceRoot":""}